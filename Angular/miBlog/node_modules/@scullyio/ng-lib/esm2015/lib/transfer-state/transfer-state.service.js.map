{"version":3,"file":"transfer-state.service.js","sourceRoot":"/home/runner/work/scully/scully/libs/ng-lib/src/","sources":["lib/transfer-state/transfer-state.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { NavigationEnd, NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject, NEVER, Observable, of } from 'rxjs';\nimport { catchError, filter, first, map, pluck, shareReplay, switchMap, take, takeWhile, tap } from 'rxjs/operators';\nimport { basePathOnly } from '../utils/basePathOnly';\nimport { fetchHttp } from '../utils/fetchHttp';\nimport { isScullyGenerated, isScullyRunning } from '../utils/isScully';\nimport { mergePaths } from '../utils/merge-paths';\n\nconst SCULLY_SCRIPT_ID = `ScullyIO-transfer-state`;\nconst SCULLY_STATE_START = `/** ___SCULLY_STATE_START___ */`;\nconst SCULLY_STATE_END = `/** ___SCULLY_STATE_END___ */`;\nconst initialStateDone = '__done__with__Initial__navigation__';\n\ndeclare global {\n  interface Window {\n    'ScullyIO-injected': {\n      inlineStateOnly?: boolean;\n      [key: string]: any;\n    };\n  }\n}\n\ninterface State {\n  [key: string]: any;\n}\n// Adding this dynamic comment to suppress ngc error around Document as a DI token.\n// https://github.com/angular/angular/issues/20351#issuecomment-344009887\n/** @dynamic */\n@Injectable({\n  providedIn: 'root',\n})\nexport class TransferStateService {\n  private script: HTMLScriptElement;\n  /** parse from index, or load from data.json, according to scullConfig setting */\n  private inlineOnly = false;\n\n  private initialUrl: string;\n  /** set the currentBase to something that it can never be */\n  private currentBaseUrl = '//';\n  /** subject to fire off incoming states */\n  private stateBS = new BehaviorSubject<State>({});\n  private state$ = this.stateBS.pipe(filter((state) => state !== undefined));\n  // emit the next url when routing is complete\n  private nextUrl = this.router.events.pipe(\n    filter((e) => e instanceof NavigationStart),\n    switchMap((e: NavigationStart) => {\n      if (basePathOnly(this.initialUrl) === basePathOnly(e.url)) {\n        /** don't kick off on initial load to prevent flicker */\n        this.initialUrl = initialStateDone;\n        return NEVER;\n      }\n      return of(e);\n    }),\n    /** reset the state, so new components will never get stale data */\n    tap(() => this.stateBS.next(undefined)),\n    /** prevent emitting before navigation to _this_ URL is done. */\n    switchMap((e: NavigationStart) =>\n      this.router.events.pipe(\n        filter((ev) => ev instanceof NavigationEnd && ev.url === e.url),\n        first()\n      )\n    ),\n    map((ev: NavigationEnd) => basePathOnly(ev.urlAfterRedirects || ev.url)),\n    shareReplay(1)\n  );\n\n  constructor(@Inject(DOCUMENT) private document: Document, private router: Router) {}\n\n  startMonitoring() {\n    if (window && window['ScullyIO-injected'] && window['ScullyIO-injected'].inlineStateOnly) {\n      this.inlineOnly = true;\n    }\n    this.setupEnvForTransferState();\n    this.setupStartNavMonitoring();\n  }\n\n  private setupEnvForTransferState(): void {\n    if (isScullyRunning()) {\n      this.injectScript();\n      // In Scully puppeteer\n      const exposed = window['ScullyIO-exposed'] || {};\n      if (exposed.transferState) {\n        this.stateBS.next(exposed.transferState);\n        this.saveState(exposed.transferState);\n      }\n    } else if (isScullyGenerated()) {\n      // On the client AFTER scully rendered it\n      this.initialUrl = window.location.pathname || '__no_NO_no__';\n      this.initialUrl = this.initialUrl !== '/' && this.initialUrl.endsWith('/') ? this.initialUrl.slice(0, -1) : this.initialUrl;\n      /** set the initial state */\n      this.stateBS.next((window && window[SCULLY_SCRIPT_ID]) || {});\n    }\n  }\n\n  private injectScript() {\n    this.script = this.document.createElement('script');\n    this.script.setAttribute('id', SCULLY_SCRIPT_ID);\n    let last = document.body.lastChild;\n    while (last.previousSibling.nodeName === 'SCRIPT') {\n      last = last.previousSibling as ChildNode;\n    }\n    document.body.insertBefore(this.script, last);\n  }\n\n  /**\n   * Getstate will return an observable that containes the data.\n   * It does so right after the navigation for the page has finished.\n   * please note, this works SYNC on initial route, preventing a flash of content.\n   * @param name The name of the state to\n   */\n  getState<T>(name: string): Observable<T> {\n    /** start of the fetch for the current active route. */\n    this.fetchTransferState();\n    return this.state$.pipe(\n      pluck(name)\n      // tap((data) => console.log('tss', data))\n    );\n  }\n\n  /**\n   * Read the current state, and see if it has an value for the name.\n   * (note the value it containes still can be undefined!)\n   */\n  stateHasKey(name: string) {\n    return this.stateBS.value && this.stateBS.value.hasOwnProperty(name);\n  }\n\n  /**\n   * Read the current state, and see if it has an value for the name.\n   * ys also if there is actually an value in the state.\n   */\n  stateKeyHasValue(name: string) {\n    return this.stateBS.value && this.stateBS.value.hasOwnProperty(name) && this.stateBS.value[name] != null;\n  }\n\n  /**\n   * SetState will update the script in the generated page with data added.\n   * @param name\n   * @param val\n   */\n  setState<T>(name: string, val: T): void {\n    const newState = { ...this.stateBS.value, [name]: val };\n    this.stateBS.next(newState);\n    this.saveState(newState);\n  }\n\n  private saveState(newState) {\n    if (isScullyRunning()) {\n      this.script.textContent = `{window['${SCULLY_SCRIPT_ID}']=_u(\\`${SCULLY_STATE_START}${escapeHtml(\n        JSON.stringify(newState)\n      )}${SCULLY_STATE_END}\\`);function _u(t){t=t.split('${SCULLY_STATE_START}')[1].split('${SCULLY_STATE_END}')[0];const u={'_~b~': \"${'`'}\",'_~q~': \"'\",'_~o~': '$','_~s~': '/','_~l~': '<','_~g~': '>'};return JSON.parse(t.replace(/_~d~/g,'\\\\\\\\\"').replace(/_~[^]~/g, (s) => u[s]).replace(/\\\\n/g,'\\\\\\\\n').replace(/\\\\t/g,'\\\\\\\\t').replace(/\\\\r/g,'\\\\\\\\r'));}}`;\n    }\n  }\n\n  /**\n   * starts monitoring the router, and keep the url from the last completed navigation handy.\n   */\n  private setupStartNavMonitoring() {\n    if (!isScullyGenerated()) {\n      return;\n    }\n\n    /** start monitoring the routes */\n    this.nextUrl.subscribe();\n  }\n\n  /**\n   * Wraps an observable into scully's transfer state. If data for the provided `name` is\n   * available in the state, it gets returned. Otherwise, the `originalState` observable will\n   * be returned.\n   *\n   * On subsequent calls, the data in the state will always be returned. The `originalState` will\n   * be returned only once.\n   *\n   * This is a convenience method which does not require you to use `getState`/`setState` manually.\n   *\n   * @param name state key\n   * @param originalState an observable which yields the desired data\n   */\n  useScullyTransferState<T>(name: string, originalState: Observable<T>): Observable<T> {\n    if (isScullyGenerated()) {\n      return this.getState(name);\n    }\n    return originalState.pipe(tap((state) => this.setState(name, state)));\n  }\n\n  private async fetchTransferState(): Promise<void> {\n    /** helper to read the part before the first slash (ignores leading slash) */\n    const base = (url: string) => url.split('/').filter((part) => part.trim() !== '')[0];\n    /** put this in the next event cycle so the correct route can be read */\n    await new Promise((r) => setTimeout(r, 0));\n    /** get the current url */\n    const currentUrl = await this.nextUrl.pipe(take(1)).toPromise();\n    const baseUrl = base(currentUrl);\n    if (this.currentBaseUrl === baseUrl) {\n      /** already monitoring, don't tho a thing */\n      return;\n    }\n    /** keep the baseUrl for later reference */\n    this.currentBaseUrl = baseUrl;\n    this.nextUrl\n      .pipe(\n        /** keep updating till we move to another route */\n        takeWhile((url) => base(url) === this.currentBaseUrl),\n        // Get the next route's data from the the index or data file\n        switchMap((url) => (this.inlineOnly ? this.readFromIndex(url) : this.readFromJson(url))),\n        catchError((e) => {\n          // TODO: come up with better error text.\n          /** the developer needs to know, but its not fatal, so just return an empty state */\n          console.warn('Error while loading of parsing Scully state:', e);\n          return of({});\n        }),\n        tap((newState) => {\n          /** and activate the state in the components. on any error it will be empty */\n          this.stateBS.next(newState);\n        })\n      )\n      .subscribe({\n        /** when completes (different URL) */\n        complete: () => {\n          /** reset the currentBaseUrl */\n          this.currentBaseUrl = '//';\n        },\n      });\n  }\n\n  private readFromJson(url: string): Promise<object> {\n    return fetchHttp<object>(dropPreSlash(mergePaths(url, '/data.json')));\n  }\n\n  private readFromIndex(url): Promise<object> {\n    return fetchHttp<string>(dropPreSlash(mergePaths(url, '/index.html')), 'text').then((html: string) => {\n      const newStateStr = html.split(SCULLY_STATE_START)[1].split(SCULLY_STATE_END)[0];\n      return JSON.parse(unescapeHtml(newStateStr));\n    });\n  }\n}\n\nfunction dropPreSlash(string: string): string {\n  return string.startsWith('/') ? string.slice(1) : string;\n}\n\n/**\n * we need to escape our HTML to prevent XXS,\n * It needs to be custom, because the content can already contain html-escaped sequences\n **/\nexport function escapeHtml(text: string): string {\n  const escapedText: { [k: string]: string } = {\n    \"'\": '_~q~',\n    $: '_~o~',\n    '`': '_~b~',\n    '/': '_~s~',\n    '<': '_~l~',\n    '>': '_~g~',\n  };\n  return (\n    text\n      /** escape the json */\n      .replace(/[\\$`'<>\\/]/g, (s) => escapedText[s])\n      /** replace escaped double-quotes with single */\n      .replace(/\\\\\\\"/g, `_~d~`)\n  );\n}\n\n/**\n * Unescape our custom escaped texts\n * @param text\n */\nexport function unescapeHtml(text: string): string {\n  const unescapedText: { [k: string]: string } = {\n    '_~q~': \"'\",\n    '_~b~': '`',\n    '_~o~': '$',\n    '_~s~': '/',\n    '_~l~': '<',\n    '_~g~': '>',\n  };\n\n  return (\n    text\n      /** put back escaped double quotes to make valid json again */\n      .replace(/_~d~/g, `\\\\\"`)\n      /** replace the custom escapes */\n      .replace(/_~[^]~/g, (s) => unescapedText[s])\n      /** restore newlines+cr */\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n  );\n}\n"]}