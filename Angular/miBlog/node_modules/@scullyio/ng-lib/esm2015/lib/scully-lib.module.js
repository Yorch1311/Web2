/**
 * @fileoverview added by tsickle
 * Generated from: lib/scully-lib.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { ScullyDefaultSettings, SCULLY_LIB_CONFIG } from './config/scully-config';
import { IdleMonitorService } from './idleMonitor/idle-monitor.service';
import { ScullyContentModule } from './scully-content/scully-content.module';
export class ScullyLibModule {
    /**
     * @param {?} idle
     */
    constructor(idle) {
        this.idle = idle;
    }
    /**
     * We use a little trick to get a working idle-service.
     * First, we separate out the component in a separate module to prevent a circulair injection
     * second we create a constuctor that activates the IdleMonitorService. as that is provided for 'root'
     * there will be only 1 instance in our app.
     * We don't need forRoot, as we are not configuring anything in here.
     * @param {?=} config
     * @return {?}
     */
    static forRoot(config = ScullyDefaultSettings) {
        config = Object.assign({}, ScullyDefaultSettings, config);
        return {
            ngModule: ScullyLibModule,
            providers: [{ provide: SCULLY_LIB_CONFIG, useValue: config }],
        };
    }
}
ScullyLibModule.decorators = [
    { type: NgModule, args: [{
                imports: [ScullyContentModule],
                exports: [ScullyContentModule],
            },] }
];
/** @nocollapse */
ScullyLibModule.ctorParameters = () => [
    { type: IdleMonitorService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    ScullyLibModule.prototype.idle;
}
//# sourceMappingURL=scully-lib.module.js.map