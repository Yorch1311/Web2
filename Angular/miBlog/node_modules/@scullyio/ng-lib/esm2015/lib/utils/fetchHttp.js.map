{"version":3,"file":"fetchHttp.js","sourceRoot":"/home/runner/work/scully/scully/libs/ng-lib/src/","sources":["lib/utils/fetchHttp.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,MAAM,UAAU,SAAS,CACvB,GAAW,EACX,eAA2C,MAAM;IAEjD,OAAO,IAAI,OAAO;;;;;IAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;;cAC/B,GAAG,GAAG,IAAI,cAAc,EAAE;QAChC,GAAG,CAAC,YAAY,GAAG,YAAY,CAAC;QAChC,GAAG,CAAC,gBAAgB,CAAC,MAAM;;;;QAAE,EAAE,CAAC,EAAE;YAChC,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,EAAE;gBACtB,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC;aACpB;YACD,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACxB,CAAC,EAAC,CAAC;QACH,GAAG,CAAC,gBAAgB,CAAC,OAAO;;;;QAAE,CAAC,GAAG,GAAG,EAAE,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,EAAC,CAAC;QACvD,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;QAC3B,GAAG,CAAC,IAAI,EAAE,CAAC;IACb,CAAC,EAAC,CAAC;AACL,CAAC","sourcesContent":["export function fetchHttp<T>(\n  url: string,\n  responseType: XMLHttpRequestResponseType = 'json'\n): Promise<T> {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n    xhr.responseType = responseType;\n    xhr.addEventListener('load', ev => {\n      if (xhr.status !== 200) {\n        return reject(xhr);\n      }\n      resolve(xhr.response);\n    });\n    xhr.addEventListener('error', (...err) => reject(err));\n    xhr.open('get', url, true);\n    xhr.send();\n  });\n}\n"]}