{"version":3,"file":"scully-content.component.js","sourceRoot":"/home/runner/work/scully/scully/libs/ng-lib/src/","sources":["lib/scully-content/scully-content.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Location } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  isDevMode,\n  OnDestroy,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { filter, take, tap } from 'rxjs/operators';\nimport { ScullyDefaultSettings, ScullyLibConfig, SCULLY_LIB_CONFIG } from '../config/scully-config';\nimport { ScullyRoutesService } from '../route-service/scully-routes.service';\nimport { basePathOnly } from '../utils/basePathOnly';\nimport { fetchHttp } from '../utils/fetchHttp';\nimport { findComments } from '../utils/findComments';\n\ninterface ScullyContent {\n  html: string;\n  cssId: string;\n}\ndeclare global {\n  interface Window {\n    scullyContent: ScullyContent;\n  }\n}\n/** this is needed, because otherwise the CLI borks while building */\nconst scullyBegin = '<!--scullyContent-begin-->';\nconst scullyEnd = '<!--scullyContent-end-->';\n\n/** use the module's closure to keep a system-wide check for the last handled URL. */\nlet lastHandled: String;\n\n@Component({\n  // tslint:disable-next-line: component-selector\n  selector: 'scully-content',\n  template: '<ng-content></ng-content>',\n  styles: [\n    `\n      :host {\n        display: none;\n      }\n      scully-content {\n        display: none;\n      }\n    `,\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: true,\n})\nexport class ScullyContentComponent implements OnDestroy, OnInit {\n  baseUrl = this.conf.useTransferState || ScullyDefaultSettings.useTransferState;\n  elm = this.elmRef.nativeElement as HTMLElement;\n  /** pull in all  available routes into an eager promise */\n  routes = this.srs.allRoutes$.pipe(take(1)).toPromise();\n  /** monitor the router, so we can update while navigating in the same 'page' see #311 */\n  routeUpdates$ = this.router.events.pipe(\n    filter((ev) => ev instanceof NavigationEnd),\n    /** don't replace if we are already there */\n    filter((ev: NavigationEnd) => lastHandled && !lastHandled.endsWith(ev.urlAfterRedirects)),\n    tap((r) => this.replaceContent())\n  );\n\n  routeSub = this.routeUpdates$.subscribe();\n\n  constructor(\n    private elmRef: ElementRef,\n    private srs: ScullyRoutesService,\n    private router: Router,\n    private location: Location,\n    @Inject(SCULLY_LIB_CONFIG) private conf: ScullyLibConfig\n  ) {\n    /** do this from constructor, so it runs ASAP */\n  }\n\n  ngOnInit(): void {\n    if (this.elm) {\n      /** this will only fire in a browser environment */\n      this.handlePage();\n    }\n  }\n\n  /**\n   * Loads the static content from scully into the view\n   * Will fetch the content from sibling links with xmlHTTPrequest\n   */\n  private async handlePage() {\n    const curPage = basePathOnly(location.href);\n    if (lastHandled === curPage) {\n      /**\n       * Due to the fix we needed for #311\n       * it might happen that this routine is called\n       * twice for the same page.\n       * this code will make sure the second one is ignored.\n       */\n      return;\n    }\n    lastHandled = curPage;\n    const template = document.createElement('template');\n    const currentCssId = this.getCSSId(this.elm);\n    if (window.scullyContent) {\n      /** upgrade existing static content */\n      const htmlString = window.scullyContent.html;\n      if (currentCssId !== window.scullyContent.cssId) {\n        /** replace the angular cssId */\n        template.innerHTML = htmlString.split(window.scullyContent.cssId).join(currentCssId);\n      } else {\n        template.innerHTML = htmlString;\n      }\n    } else {\n      /**\n       *   NOTE\n       * when updateting the texts for the errors, make sure you leave the\n       *  `id=\"___scully-parsing-error___\"`\n       * in there. That way users can detect rendering errors in their CI\n       * on a reliable way.\n       */\n      await fetchHttp(curPage + '/index.html', 'text')\n        .catch((e) => {\n          if (isDevMode()) {\n            /** in devmode (usually in `ng serve`) check the scully server for the content too */\n            const uri = new URL(location.href);\n            const url = `${this.conf.baseURIForScullyContent}/${basePathOnly(uri.pathname)}/index.html`;\n            return fetchHttp(url, 'text');\n          } else {\n            return Promise.reject(e);\n          }\n        })\n        .then((html: string) => {\n          try {\n            const htmlString = html.split(scullyBegin)[1].split(scullyEnd)[0];\n            if (htmlString.includes('_ngcontent')) {\n              /** update the angular cssId */\n              const atr = '_ngcontent' + htmlString.split('_ngcontent')[1].split('=')[0];\n              template.innerHTML = htmlString.split(atr).join(currentCssId);\n            } else {\n              template.innerHTML = htmlString;\n            }\n          } catch (e) {\n            template.innerHTML = `<h2 id=\"___scully-parsing-error___\">Sorry, could not parse static page content</h2>\n            <p>This might happen if you are not using the static generated pages.</p>`;\n          }\n        })\n        .catch((e) => {\n          template.innerHTML = '<h2 id=\"___scully-parsing-error___\">Sorry, could not load static page content</h2>';\n          console.error('problem during loading static scully content', e);\n        });\n    }\n    /** insert the whole thing just before the `<scully-content>` element */\n    const parent = this.elm.parentElement || document.body;\n    const begin = document.createComment('scullyContent-begin');\n    const end = document.createComment('scullyContent-end');\n    parent.insertBefore(begin, this.elm);\n    parent.insertBefore(template.content, this.elm);\n    parent.insertBefore(end, this.elm);\n    /** upgrade all hrefs to simulated routelinks (in next microtask) */\n    setTimeout(() => document.querySelectorAll('[href]').forEach(this.upgradeToRoutelink.bind(this)), 10);\n    // document.querySelectorAll('[href]').forEach(this.upgradeToRoutelink.bind(this));\n  }\n\n  /**\n   * upgrade a **href** attributes to links that respect the Angular router\n   * and don't do a full page reload. Only works on links that are found in the\n   * Scully route config file.\n   * @param elm the element containing the **hrefs**\n   */\n  async upgradeToRoutelink(elm: HTMLElement) {\n    if (!['A', 'BUTTON'].includes(elm.tagName)) {\n      return;\n    }\n    const hash = elm.dataset.hash;\n    if (hash) {\n      elm.setAttribute('href', '#' + hash);\n      elm.setAttribute('onclick', '');\n      elm.onclick = (ev: MouseEvent) => {\n        ev.preventDefault();\n        const destination = document.getElementById(hash);\n        if (destination) {\n          const url = new URL(window.location.href);\n          url.hash = hash;\n          history.replaceState('', '', url.toString());\n          destination.scrollIntoView();\n        }\n      };\n      return;\n    }\n    const routes = await this.routes;\n    const href = elm.getAttribute('href');\n    const lnk = basePathOnly(href.toLowerCase());\n    const route = routes.find((r) => basePathOnly(r.route.toLowerCase()) === lnk);\n\n    /** only upgrade routes known by scully. */\n    if (lnk && route && !lnk.startsWith('#')) {\n      elm.onclick = async (ev: MouseEvent) => {\n        const splitRoute = route.route.split(`/`);\n        const curSplit = location.pathname.split('/');\n        // loose last \"part\" of route\n        curSplit.pop();\n\n        ev.preventDefault();\n        const routed = await this.router.navigate(splitRoute).catch((e) => {\n          console.error('routing error', e);\n          return false;\n        });\n        if (!routed) {\n          return;\n        }\n\n        /** check for the same route with different \"data\", and NOT a 1 level higher (length), and is not a fragment of th same page */\n        if (curSplit.every((part, i) => splitRoute[i] === part) && splitRoute.length !== curSplit.length + 1) {\n          setTimeout(() => this.replaceContent(), 10); // a small delay, so we are sure the angular parts in the page are settled enough\n        }\n      };\n    }\n  }\n\n  private replaceContent(): void {\n    /**\n     * as Angular doesn't destroy the component if we stay on the same page,\n     * we have to manually delete old content. Also we need to kick of loading\n     * the new content. handlePage() takes care of that.\n     */\n    /** delete the content, as it is now out of date! */\n\n    window.scullyContent = undefined;\n    const parent = this.elm.parentElement;\n    let cur = findComments(parent, 'scullyContent-begin')[0] as ChildNode;\n    while (cur && cur !== this.elm) {\n      const next = cur.nextSibling;\n      parent.removeChild(cur);\n      cur = next;\n    }\n    this.handlePage();\n  }\n\n  getCSSId(elm: HTMLElement) {\n    return elm.getAttributeNames().find((a) => a.startsWith('_ngcontent')) || '';\n  }\n\n  ngOnDestroy() {\n    this.routeSub.unsubscribe();\n    /** reset the lastused */\n    lastHandled = '//';\n  }\n}\n"]}