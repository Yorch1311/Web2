{"version":3,"file":"idle-monitor.service.js","sourceRoot":"/home/runner/work/scully/scully/libs/ng-lib/src/","sources":["lib/idleMonitor/idle-monitor.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Inject, Injectable, NgZone } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter, pluck, take, tap } from 'rxjs/operators';\nimport { ScullyLibConfig, SCULLY_LIB_CONFIG, ScullyDefaultSettings } from '../config/scully-config';\nimport { TransferStateService } from '../transfer-state/transfer-state.service';\nimport { isScullyRunning } from '../utils/isScully';\n\n// tslint:disable-next-line: no-any\n// tslint:disable: no-string-literal\ndeclare const Zone: any;\n\ninterface LocalState {\n  idle: boolean;\n  timeOut: number;\n}\n\ndeclare global {\n  interface Window {\n    'ScullyIO-exposed': {\n      manualIdle?: boolean;\n      transferState?: any;\n      [key: string]: any;\n    };\n  }\n}\n\n// if (window) {\n//   window.addEventListener('AngularReady', ev => {\n//     console.log('appReady fired', ev);\n//   });\n// }\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IdleMonitorService {\n  private scullyLibConfig: ScullyLibConfig;\n  /** store the 'landing' url so we can skip it in idle-check. */\n  private initialUrl = dropEndingSlash(window && window.location && window.location.pathname) || '';\n  private imState = new BehaviorSubject<LocalState>({\n    idle: false,\n    timeOut: 5 * 1000, // 5 seconds timeout as default\n  });\n  public idle$ = this.imState.pipe(pluck('idle'));\n\n  private initApp = new Event('AngularInitialized', {\n    bubbles: true,\n    cancelable: false,\n  });\n  private appReady = new Event('AngularReady', {\n    bubbles: true,\n    cancelable: false,\n  });\n  private appTimeout = new Event('AngularTimeout', {\n    bubbles: true,\n    cancelable: false,\n  });\n\n  constructor(\n    private zone: NgZone,\n    private router: Router,\n    @Inject(SCULLY_LIB_CONFIG) conf: ScullyLibConfig,\n    tss: TransferStateService\n  ) {\n    /** provide the default for missing conf paramter */\n    this.scullyLibConfig = Object.assign({}, ScullyDefaultSettings, conf);\n    const exposed = window['ScullyIO-exposed'] || {};\n    const manualIdle = !!exposed.manualIdle;\n\n    if (!this.scullyLibConfig.manualIdle && window && (this.scullyLibConfig.alwaysMonitor || isScullyRunning())) {\n      window.dispatchEvent(this.initApp);\n      this.router.events\n        .pipe(\n          filter((ev) => ev instanceof NavigationEnd && ev.urlAfterRedirects !== undefined),\n          /** don't check the page that has this setting. event is only importand on page load */\n          filter((ev: NavigationEnd) => (manualIdle ? ev.urlAfterRedirects !== this.initialUrl : true)),\n          tap(() => this.zoneIdleCheck())\n        )\n        .subscribe();\n    }\n    if (this.scullyLibConfig.manualIdle) {\n      /** we still need the init event. */\n      window.dispatchEvent(this.initApp);\n    }\n    if (this.scullyLibConfig.useTransferState) {\n      /** don't start monitoring if people don't use the transferState */\n      tss.startMonitoring();\n    }\n  }\n\n  public async fireManualMyAppReadyEvent() {\n    return window.dispatchEvent(this.appReady);\n  }\n\n  public async init() {\n    return this.idle$.pipe(take(1)).toPromise();\n  }\n\n  private async zoneIdleCheck() {\n    if (Zone === undefined) {\n      return this.simpleTimeout();\n    }\n    const taskTrackingZone = Zone.current.get('TaskTrackingZone');\n    if (taskTrackingZone === undefined) {\n      return this.simpleTimeout();\n    }\n    if (this.imState.value.idle) {\n      await this.setState('idle', false);\n    }\n    /** run the actual check for 'idle' outsides zone, otherwise it will never come to an end. */\n    this.zone.runOutsideAngular(() => {\n      let tCancel: NodeJS.Timeout;\n      let count = 0;\n      const startTime = Date.now();\n      const monitor = () => {\n        clearTimeout(tCancel);\n        // console.table(taskTrackingZone.macroTasks);\n        if (Date.now() - startTime > 30 * 1000) {\n          /** bail out after 30 seconds. */\n          window.dispatchEvent(this.appTimeout);\n          return;\n        }\n        if (\n          (taskTrackingZone.macroTasks.length > 0 &&\n            taskTrackingZone.macroTasks.find((z: { source: string | string[] }) => z.source.includes('XMLHttpRequest')) !==\n              undefined) ||\n          count < 1 // make sure it runs at least once!\n        ) {\n          tCancel = setTimeout(() => {\n            count += 1;\n            monitor();\n          }, 50);\n          return;\n        }\n        this.zone.run(() => {\n          /** run this inside the zone, and give the app 250Ms to wrap up, before scraping starts */\n          setTimeout(() => {\n            window.dispatchEvent(this.appReady);\n            this.setState('idle', true);\n          }, 250);\n        });\n      };\n      monitor();\n    });\n  }\n\n  private async simpleTimeout() {\n    /** zone not available, use a timeout instead. */\n    console.warn('Scully is using timeouts, add the needed polyfills instead!');\n    await new Promise((r) => setTimeout(r, this.imState.value.timeOut));\n    window.dispatchEvent(this.appReady);\n  }\n\n  public setPupeteerTimeoutValue(milliseconds: number) {\n    this.imState.next({ ...this.imState.value, timeOut: milliseconds });\n  }\n\n  private setState(key: string, value: any) {\n    this.imState.next({ ...this.imState.value, [key]: value });\n  }\n}\n\nexport function dropEndingSlash(str: string) {\n  return str.endsWith('/') ? str.slice(0, -1) : str;\n}\n"]}