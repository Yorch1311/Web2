{"version":3,"file":"scully-routes.service.js","sourceRoot":"/home/runner/work/scully/scully/libs/ng-lib/src/","sources":["lib/route-service/scully-routes.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, of, ReplaySubject, merge } from 'rxjs';\nimport {\n  catchError,\n  map,\n  shareReplay,\n  switchMap,\n  filter,\n} from 'rxjs/operators';\nimport { fetchHttp } from '../utils/fetchHttp';\nimport { Router, NavigationEnd, NavigationStart } from '@angular/router';\nimport { basePathOnly } from '../utils/basePathOnly';\n\nexport interface ScullyRoute {\n  route: string;\n  title?: string;\n  slugs?: string[];\n  published?: boolean;\n  slug?: string;\n  sourceFile?: string;\n  lang?: string;\n  [prop: string]: any;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ScullyRoutesService {\n  private refresh = new ReplaySubject<void>(1);\n  /**\n   * An observable with all routes, published and unpublished alike\n   */\n  allRoutes$: Observable<ScullyRoute[]> = this.refresh.pipe(\n    switchMap(() => fetchHttp<ScullyRoute[]>('assets/scully-routes.json')),\n    catchError(() => {\n      console.warn(\n        'Scully routes file not found, are you running the Scully generated version of your site?'\n      );\n      return of([] as ScullyRoute[]);\n    }),\n    /** filter out all non-array results */\n    filter((routes) => Array.isArray(routes)),\n    map(this.cleanDups),\n    shareReplay({ refCount: false, bufferSize: 1 })\n  );\n  /**\n   * An observable with available routes (all published routes)\n   */\n  available$ = this.allRoutes$.pipe(\n    map((list) =>\n      list.filter((r) =>\n        r.hasOwnProperty('published') ? r.published !== false : true\n      )\n    ),\n    shareReplay({ refCount: false, bufferSize: 1 })\n  );\n\n  /**\n   * an observable with all unpublished routes\n   */\n  unPublished$ = this.allRoutes$.pipe(\n    map((list) =>\n      list.filter((r) =>\n        r.hasOwnProperty('published') ? r.published === false : false\n      )\n    ),\n    shareReplay({ refCount: false, bufferSize: 1 })\n  );\n\n  /**\n   * An observable with the top-level off all published routes.\n   * (in an urls it would be `http://www.sample.org/__thisPart__/subroutes`)\n   */\n  topLevel$: Observable<ScullyRoute[]> = this.available$.pipe(\n    map((routes) =>\n      routes.filter((r: ScullyRoute) => !r.route.slice(1).includes('/'))\n    ),\n    shareReplay({ refCount: false, bufferSize: 1 })\n  );\n\n  constructor(private router: Router) {\n    /** kick off first cycle */\n    this.reload();\n  }\n\n  /**\n   * returns an observable that returns the route information for the\n   * route currently selected. subscribes to route-events to update when needed\n   */\n  getCurrent(): Observable<ScullyRoute> {\n    if (!location) {\n      /** probably not in a browser, no current location available */\n      return of();\n    }\n    /** fire off at start, and when navigation is done. */\n    return merge(of(new NavigationEnd(0, '', '')), this.router.events).pipe(\n      filter((e) => e instanceof NavigationEnd),\n      switchMap(() => this.available$),\n      map((list) => {\n        const curLocation = basePathOnly(encodeURI(location.pathname).trim());\n        return list.find(\n          (r) =>\n            curLocation === basePathOnly(r.route.trim()) ||\n            (r.slugs &&\n              Array.isArray(r.slugs) &&\n              r.slugs.find((slug) =>\n                curLocation.endsWith(basePathOnly(slug.trim()))\n              ))\n        );\n      })\n    );\n  }\n\n  /**\n   * internal, as routes can have multiple slugs, and so occur multiple times\n   * this util function collapses all slugs back into 1 route.\n   */\n  private cleanDups(routes: ScullyRoute[]) {\n    const m = new Map<string, ScullyRoute>();\n    /** check for duplicates by comparing all, include route in comparison if its the only thing, or the only thing with only the tile  */\n    routes.forEach((r) =>\n      m.set(JSON.stringify({ ...r, route: hasOtherprops(r) ? '' : r.route }), r)\n    );\n    return [...m.values()];\n  }\n\n  /** an utility that will force a reload of the `scully-routes.json` file */\n  reload(): void {\n    this.refresh.next();\n  }\n}\n\nfunction hasOtherprops(obj) {\n  const keys = Object.keys(obj);\n  if (keys.length === 1 && keys.includes('route')) {\n    return false;\n  }\n  if (keys.length === 2 && keys.includes('route') && keys.includes('title')) {\n    return false;\n  }\n  return true;\n}\n"]}