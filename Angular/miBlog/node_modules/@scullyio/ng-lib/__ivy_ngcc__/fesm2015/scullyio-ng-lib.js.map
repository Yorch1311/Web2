{"version":3,"file":"scullyio-ng-lib.js","sources":["../../../../libs/ng-lib/src/lib/config/scully-config.ts","../../../../libs/ng-lib/src/lib/utils/basePathOnly.ts","../../../../libs/ng-lib/src/lib/utils/fetchHttp.ts","../../../../libs/ng-lib/src/lib/utils/isScully.ts","../../../../libs/ng-lib/src/lib/utils/merge-paths.ts","../../../../libs/ng-lib/src/lib/transfer-state/transfer-state.service.ts","../../../../libs/ng-lib/src/lib/idleMonitor/idle-monitor.service.ts","../../../../libs/ng-lib/src/lib/route-service/scully-routes.service.ts","../../../../libs/ng-lib/src/lib/utils/findComments.ts","../../../../libs/ng-lib/src/lib/scully-content/scully-content.component.ts","../../../../libs/ng-lib/src/lib/scully-content/scully-content.module.ts","../../../../libs/ng-lib/src/lib/scully-lib.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport interface ScullyLibConfig {\n  useTransferState?: boolean;\n  alwaysMonitor?: boolean;\n  manualIdle?: boolean;\n  baseURIForScullyContent?: string;\n}\n\nexport const ScullyDefaultSettings: Required<ScullyLibConfig> = {\n  useTransferState: true,\n  alwaysMonitor: false,\n  manualIdle: false,\n  baseURIForScullyContent: 'http://localhost:1668',\n};\n\nexport const SCULLY_LIB_CONFIG = new InjectionToken<ScullyLibConfig>('scullyLibConfig', {\n  factory: () => ScullyDefaultSettings,\n});\n","/**\n * Take a string, preferably resembling an URL, take out the search params, the anchors, and the ending slash\n * @param str\n */\nexport const basePathOnly = (str: string): string => {\n  if (str.includes('#')) {\n    str = str.split('#')[0];\n  }\n  if (str.includes('?')) {\n    str = str.split('?')[0];\n  }\n  const cleanedUpVersion = str.endsWith('/') ? str.slice(0, -1) : str;\n  return cleanedUpVersion;\n};\n","export function fetchHttp<T>(\n  url: string,\n  responseType: XMLHttpRequestResponseType = 'json'\n): Promise<T> {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n    xhr.responseType = responseType;\n    xhr.addEventListener('load', ev => {\n      if (xhr.status !== 200) {\n        return reject(xhr);\n      }\n      resolve(xhr.response);\n    });\n    xhr.addEventListener('error', (...err) => reject(err));\n    xhr.open('get', url, true);\n    xhr.send();\n  });\n}\n","// tslint:disable: no-string-literal\nexport const isScullyRunning = () => window && window['ScullyIO'] === 'running';\nexport const isScullyGenerated = () =>\n  window && window['ScullyIO'] === 'generated';\n","export function mergePaths(base: string, path: string): string {\n  if (base.endsWith('/') && path.startsWith('/')) {\n    return `${base}${path.substr(1)}`;\n  }\n  if (!base.endsWith('/') && !path.startsWith('/')) {\n    return `${base}/${path}`;\n  }\n  return `${base}${path}`;\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { NavigationEnd, NavigationStart, Router } from '@angular/router';\nimport { BehaviorSubject, NEVER, Observable, of } from 'rxjs';\nimport { catchError, filter, first, map, pluck, shareReplay, switchMap, take, takeWhile, tap } from 'rxjs/operators';\nimport { basePathOnly } from '../utils/basePathOnly';\nimport { fetchHttp } from '../utils/fetchHttp';\nimport { isScullyGenerated, isScullyRunning } from '../utils/isScully';\nimport { mergePaths } from '../utils/merge-paths';\n\nconst SCULLY_SCRIPT_ID = `ScullyIO-transfer-state`;\nconst SCULLY_STATE_START = `/** ___SCULLY_STATE_START___ */`;\nconst SCULLY_STATE_END = `/** ___SCULLY_STATE_END___ */`;\nconst initialStateDone = '__done__with__Initial__navigation__';\n\ndeclare global {\n  interface Window {\n    'ScullyIO-injected': {\n      inlineStateOnly?: boolean;\n      [key: string]: any;\n    };\n  }\n}\n\ninterface State {\n  [key: string]: any;\n}\n// Adding this dynamic comment to suppress ngc error around Document as a DI token.\n// https://github.com/angular/angular/issues/20351#issuecomment-344009887\n/** @dynamic */\n@Injectable({\n  providedIn: 'root',\n})\nexport class TransferStateService {\n  private script: HTMLScriptElement;\n  /** parse from index, or load from data.json, according to scullConfig setting */\n  private inlineOnly = false;\n\n  private initialUrl: string;\n  /** set the currentBase to something that it can never be */\n  private currentBaseUrl = '//';\n  /** subject to fire off incoming states */\n  private stateBS = new BehaviorSubject<State>({});\n  private state$ = this.stateBS.pipe(filter((state) => state !== undefined));\n  // emit the next url when routing is complete\n  private nextUrl = this.router.events.pipe(\n    filter((e) => e instanceof NavigationStart),\n    switchMap((e: NavigationStart) => {\n      if (basePathOnly(this.initialUrl) === basePathOnly(e.url)) {\n        /** don't kick off on initial load to prevent flicker */\n        this.initialUrl = initialStateDone;\n        return NEVER;\n      }\n      return of(e);\n    }),\n    /** reset the state, so new components will never get stale data */\n    tap(() => this.stateBS.next(undefined)),\n    /** prevent emitting before navigation to _this_ URL is done. */\n    switchMap((e: NavigationStart) =>\n      this.router.events.pipe(\n        filter((ev) => ev instanceof NavigationEnd && ev.url === e.url),\n        first()\n      )\n    ),\n    map((ev: NavigationEnd) => basePathOnly(ev.urlAfterRedirects || ev.url)),\n    shareReplay(1)\n  );\n\n  constructor(@Inject(DOCUMENT) private document: Document, private router: Router) {}\n\n  startMonitoring() {\n    if (window && window['ScullyIO-injected'] && window['ScullyIO-injected'].inlineStateOnly) {\n      this.inlineOnly = true;\n    }\n    this.setupEnvForTransferState();\n    this.setupStartNavMonitoring();\n  }\n\n  private setupEnvForTransferState(): void {\n    if (isScullyRunning()) {\n      this.injectScript();\n      // In Scully puppeteer\n      const exposed = window['ScullyIO-exposed'] || {};\n      if (exposed.transferState) {\n        this.stateBS.next(exposed.transferState);\n        this.saveState(exposed.transferState);\n      }\n    } else if (isScullyGenerated()) {\n      // On the client AFTER scully rendered it\n      this.initialUrl = window.location.pathname || '__no_NO_no__';\n      this.initialUrl = this.initialUrl !== '/' && this.initialUrl.endsWith('/') ? this.initialUrl.slice(0, -1) : this.initialUrl;\n      /** set the initial state */\n      this.stateBS.next((window && window[SCULLY_SCRIPT_ID]) || {});\n    }\n  }\n\n  private injectScript() {\n    this.script = this.document.createElement('script');\n    this.script.setAttribute('id', SCULLY_SCRIPT_ID);\n    let last = document.body.lastChild;\n    while (last.previousSibling.nodeName === 'SCRIPT') {\n      last = last.previousSibling as ChildNode;\n    }\n    document.body.insertBefore(this.script, last);\n  }\n\n  /**\n   * Getstate will return an observable that containes the data.\n   * It does so right after the navigation for the page has finished.\n   * please note, this works SYNC on initial route, preventing a flash of content.\n   * @param name The name of the state to\n   */\n  getState<T>(name: string): Observable<T> {\n    /** start of the fetch for the current active route. */\n    this.fetchTransferState();\n    return this.state$.pipe(\n      pluck(name)\n      // tap((data) => console.log('tss', data))\n    );\n  }\n\n  /**\n   * Read the current state, and see if it has an value for the name.\n   * (note the value it containes still can be undefined!)\n   */\n  stateHasKey(name: string) {\n    return this.stateBS.value && this.stateBS.value.hasOwnProperty(name);\n  }\n\n  /**\n   * Read the current state, and see if it has an value for the name.\n   * ys also if there is actually an value in the state.\n   */\n  stateKeyHasValue(name: string) {\n    return this.stateBS.value && this.stateBS.value.hasOwnProperty(name) && this.stateBS.value[name] != null;\n  }\n\n  /**\n   * SetState will update the script in the generated page with data added.\n   * @param name\n   * @param val\n   */\n  setState<T>(name: string, val: T): void {\n    const newState = { ...this.stateBS.value, [name]: val };\n    this.stateBS.next(newState);\n    this.saveState(newState);\n  }\n\n  private saveState(newState) {\n    if (isScullyRunning()) {\n      this.script.textContent = `{window['${SCULLY_SCRIPT_ID}']=_u(\\`${SCULLY_STATE_START}${escapeHtml(\n        JSON.stringify(newState)\n      )}${SCULLY_STATE_END}\\`);function _u(t){t=t.split('${SCULLY_STATE_START}')[1].split('${SCULLY_STATE_END}')[0];const u={'_~b~': \"${'`'}\",'_~q~': \"'\",'_~o~': '$','_~s~': '/','_~l~': '<','_~g~': '>'};return JSON.parse(t.replace(/_~d~/g,'\\\\\\\\\"').replace(/_~[^]~/g, (s) => u[s]).replace(/\\\\n/g,'\\\\\\\\n').replace(/\\\\t/g,'\\\\\\\\t').replace(/\\\\r/g,'\\\\\\\\r'));}}`;\n    }\n  }\n\n  /**\n   * starts monitoring the router, and keep the url from the last completed navigation handy.\n   */\n  private setupStartNavMonitoring() {\n    if (!isScullyGenerated()) {\n      return;\n    }\n\n    /** start monitoring the routes */\n    this.nextUrl.subscribe();\n  }\n\n  /**\n   * Wraps an observable into scully's transfer state. If data for the provided `name` is\n   * available in the state, it gets returned. Otherwise, the `originalState` observable will\n   * be returned.\n   *\n   * On subsequent calls, the data in the state will always be returned. The `originalState` will\n   * be returned only once.\n   *\n   * This is a convenience method which does not require you to use `getState`/`setState` manually.\n   *\n   * @param name state key\n   * @param originalState an observable which yields the desired data\n   */\n  useScullyTransferState<T>(name: string, originalState: Observable<T>): Observable<T> {\n    if (isScullyGenerated()) {\n      return this.getState(name);\n    }\n    return originalState.pipe(tap((state) => this.setState(name, state)));\n  }\n\n  private async fetchTransferState(): Promise<void> {\n    /** helper to read the part before the first slash (ignores leading slash) */\n    const base = (url: string) => url.split('/').filter((part) => part.trim() !== '')[0];\n    /** put this in the next event cycle so the correct route can be read */\n    await new Promise((r) => setTimeout(r, 0));\n    /** get the current url */\n    const currentUrl = await this.nextUrl.pipe(take(1)).toPromise();\n    const baseUrl = base(currentUrl);\n    if (this.currentBaseUrl === baseUrl) {\n      /** already monitoring, don't tho a thing */\n      return;\n    }\n    /** keep the baseUrl for later reference */\n    this.currentBaseUrl = baseUrl;\n    this.nextUrl\n      .pipe(\n        /** keep updating till we move to another route */\n        takeWhile((url) => base(url) === this.currentBaseUrl),\n        // Get the next route's data from the the index or data file\n        switchMap((url) => (this.inlineOnly ? this.readFromIndex(url) : this.readFromJson(url))),\n        catchError((e) => {\n          // TODO: come up with better error text.\n          /** the developer needs to know, but its not fatal, so just return an empty state */\n          console.warn('Error while loading of parsing Scully state:', e);\n          return of({});\n        }),\n        tap((newState) => {\n          /** and activate the state in the components. on any error it will be empty */\n          this.stateBS.next(newState);\n        })\n      )\n      .subscribe({\n        /** when completes (different URL) */\n        complete: () => {\n          /** reset the currentBaseUrl */\n          this.currentBaseUrl = '//';\n        },\n      });\n  }\n\n  private readFromJson(url: string): Promise<object> {\n    return fetchHttp<object>(dropPreSlash(mergePaths(url, '/data.json')));\n  }\n\n  private readFromIndex(url): Promise<object> {\n    return fetchHttp<string>(dropPreSlash(mergePaths(url, '/index.html')), 'text').then((html: string) => {\n      const newStateStr = html.split(SCULLY_STATE_START)[1].split(SCULLY_STATE_END)[0];\n      return JSON.parse(unescapeHtml(newStateStr));\n    });\n  }\n}\n\nfunction dropPreSlash(string: string): string {\n  return string.startsWith('/') ? string.slice(1) : string;\n}\n\n/**\n * we need to escape our HTML to prevent XXS,\n * It needs to be custom, because the content can already contain html-escaped sequences\n **/\nexport function escapeHtml(text: string): string {\n  const escapedText: { [k: string]: string } = {\n    \"'\": '_~q~',\n    $: '_~o~',\n    '`': '_~b~',\n    '/': '_~s~',\n    '<': '_~l~',\n    '>': '_~g~',\n  };\n  return (\n    text\n      /** escape the json */\n      .replace(/[\\$`'<>\\/]/g, (s) => escapedText[s])\n      /** replace escaped double-quotes with single */\n      .replace(/\\\\\\\"/g, `_~d~`)\n  );\n}\n\n/**\n * Unescape our custom escaped texts\n * @param text\n */\nexport function unescapeHtml(text: string): string {\n  const unescapedText: { [k: string]: string } = {\n    '_~q~': \"'\",\n    '_~b~': '`',\n    '_~o~': '$',\n    '_~s~': '/',\n    '_~l~': '<',\n    '_~g~': '>',\n  };\n\n  return (\n    text\n      /** put back escaped double quotes to make valid json again */\n      .replace(/_~d~/g, `\\\\\"`)\n      /** replace the custom escapes */\n      .replace(/_~[^]~/g, (s) => unescapedText[s])\n      /** restore newlines+cr */\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n  );\n}\n","import { Inject, Injectable, NgZone } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter, pluck, take, tap } from 'rxjs/operators';\nimport { ScullyLibConfig, SCULLY_LIB_CONFIG, ScullyDefaultSettings } from '../config/scully-config';\nimport { TransferStateService } from '../transfer-state/transfer-state.service';\nimport { isScullyRunning } from '../utils/isScully';\n\n// tslint:disable-next-line: no-any\n// tslint:disable: no-string-literal\ndeclare const Zone: any;\n\ninterface LocalState {\n  idle: boolean;\n  timeOut: number;\n}\n\ndeclare global {\n  interface Window {\n    'ScullyIO-exposed': {\n      manualIdle?: boolean;\n      transferState?: any;\n      [key: string]: any;\n    };\n  }\n}\n\n// if (window) {\n//   window.addEventListener('AngularReady', ev => {\n//     console.log('appReady fired', ev);\n//   });\n// }\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IdleMonitorService {\n  private scullyLibConfig: ScullyLibConfig;\n  /** store the 'landing' url so we can skip it in idle-check. */\n  private initialUrl = dropEndingSlash(window && window.location && window.location.pathname) || '';\n  private imState = new BehaviorSubject<LocalState>({\n    idle: false,\n    timeOut: 5 * 1000, // 5 seconds timeout as default\n  });\n  public idle$ = this.imState.pipe(pluck('idle'));\n\n  private initApp = new Event('AngularInitialized', {\n    bubbles: true,\n    cancelable: false,\n  });\n  private appReady = new Event('AngularReady', {\n    bubbles: true,\n    cancelable: false,\n  });\n  private appTimeout = new Event('AngularTimeout', {\n    bubbles: true,\n    cancelable: false,\n  });\n\n  constructor(\n    private zone: NgZone,\n    private router: Router,\n    @Inject(SCULLY_LIB_CONFIG) conf: ScullyLibConfig,\n    tss: TransferStateService\n  ) {\n    /** provide the default for missing conf paramter */\n    this.scullyLibConfig = Object.assign({}, ScullyDefaultSettings, conf);\n    const exposed = window['ScullyIO-exposed'] || {};\n    const manualIdle = !!exposed.manualIdle;\n\n    if (!this.scullyLibConfig.manualIdle && window && (this.scullyLibConfig.alwaysMonitor || isScullyRunning())) {\n      window.dispatchEvent(this.initApp);\n      this.router.events\n        .pipe(\n          filter((ev) => ev instanceof NavigationEnd && ev.urlAfterRedirects !== undefined),\n          /** don't check the page that has this setting. event is only importand on page load */\n          filter((ev: NavigationEnd) => (manualIdle ? ev.urlAfterRedirects !== this.initialUrl : true)),\n          tap(() => this.zoneIdleCheck())\n        )\n        .subscribe();\n    }\n    if (this.scullyLibConfig.manualIdle) {\n      /** we still need the init event. */\n      window.dispatchEvent(this.initApp);\n    }\n    if (this.scullyLibConfig.useTransferState) {\n      /** don't start monitoring if people don't use the transferState */\n      tss.startMonitoring();\n    }\n  }\n\n  public async fireManualMyAppReadyEvent() {\n    return window.dispatchEvent(this.appReady);\n  }\n\n  public async init() {\n    return this.idle$.pipe(take(1)).toPromise();\n  }\n\n  private async zoneIdleCheck() {\n    if (Zone === undefined) {\n      return this.simpleTimeout();\n    }\n    const taskTrackingZone = Zone.current.get('TaskTrackingZone');\n    if (taskTrackingZone === undefined) {\n      return this.simpleTimeout();\n    }\n    if (this.imState.value.idle) {\n      await this.setState('idle', false);\n    }\n    /** run the actual check for 'idle' outsides zone, otherwise it will never come to an end. */\n    this.zone.runOutsideAngular(() => {\n      let tCancel: NodeJS.Timeout;\n      let count = 0;\n      const startTime = Date.now();\n      const monitor = () => {\n        clearTimeout(tCancel);\n        // console.table(taskTrackingZone.macroTasks);\n        if (Date.now() - startTime > 30 * 1000) {\n          /** bail out after 30 seconds. */\n          window.dispatchEvent(this.appTimeout);\n          return;\n        }\n        if (\n          (taskTrackingZone.macroTasks.length > 0 &&\n            taskTrackingZone.macroTasks.find((z: { source: string | string[] }) => z.source.includes('XMLHttpRequest')) !==\n              undefined) ||\n          count < 1 // make sure it runs at least once!\n        ) {\n          tCancel = setTimeout(() => {\n            count += 1;\n            monitor();\n          }, 50);\n          return;\n        }\n        this.zone.run(() => {\n          /** run this inside the zone, and give the app 250Ms to wrap up, before scraping starts */\n          setTimeout(() => {\n            window.dispatchEvent(this.appReady);\n            this.setState('idle', true);\n          }, 250);\n        });\n      };\n      monitor();\n    });\n  }\n\n  private async simpleTimeout() {\n    /** zone not available, use a timeout instead. */\n    console.warn('Scully is using timeouts, add the needed polyfills instead!');\n    await new Promise((r) => setTimeout(r, this.imState.value.timeOut));\n    window.dispatchEvent(this.appReady);\n  }\n\n  public setPupeteerTimeoutValue(milliseconds: number) {\n    this.imState.next({ ...this.imState.value, timeOut: milliseconds });\n  }\n\n  private setState(key: string, value: any) {\n    this.imState.next({ ...this.imState.value, [key]: value });\n  }\n}\n\nexport function dropEndingSlash(str: string) {\n  return str.endsWith('/') ? str.slice(0, -1) : str;\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of, ReplaySubject, merge } from 'rxjs';\nimport {\n  catchError,\n  map,\n  shareReplay,\n  switchMap,\n  filter,\n} from 'rxjs/operators';\nimport { fetchHttp } from '../utils/fetchHttp';\nimport { Router, NavigationEnd, NavigationStart } from '@angular/router';\nimport { basePathOnly } from '../utils/basePathOnly';\n\nexport interface ScullyRoute {\n  route: string;\n  title?: string;\n  slugs?: string[];\n  published?: boolean;\n  slug?: string;\n  sourceFile?: string;\n  lang?: string;\n  [prop: string]: any;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ScullyRoutesService {\n  private refresh = new ReplaySubject<void>(1);\n  /**\n   * An observable with all routes, published and unpublished alike\n   */\n  allRoutes$: Observable<ScullyRoute[]> = this.refresh.pipe(\n    switchMap(() => fetchHttp<ScullyRoute[]>('assets/scully-routes.json')),\n    catchError(() => {\n      console.warn(\n        'Scully routes file not found, are you running the Scully generated version of your site?'\n      );\n      return of([] as ScullyRoute[]);\n    }),\n    /** filter out all non-array results */\n    filter((routes) => Array.isArray(routes)),\n    map(this.cleanDups),\n    shareReplay({ refCount: false, bufferSize: 1 })\n  );\n  /**\n   * An observable with available routes (all published routes)\n   */\n  available$ = this.allRoutes$.pipe(\n    map((list) =>\n      list.filter((r) =>\n        r.hasOwnProperty('published') ? r.published !== false : true\n      )\n    ),\n    shareReplay({ refCount: false, bufferSize: 1 })\n  );\n\n  /**\n   * an observable with all unpublished routes\n   */\n  unPublished$ = this.allRoutes$.pipe(\n    map((list) =>\n      list.filter((r) =>\n        r.hasOwnProperty('published') ? r.published === false : false\n      )\n    ),\n    shareReplay({ refCount: false, bufferSize: 1 })\n  );\n\n  /**\n   * An observable with the top-level off all published routes.\n   * (in an urls it would be `http://www.sample.org/__thisPart__/subroutes`)\n   */\n  topLevel$: Observable<ScullyRoute[]> = this.available$.pipe(\n    map((routes) =>\n      routes.filter((r: ScullyRoute) => !r.route.slice(1).includes('/'))\n    ),\n    shareReplay({ refCount: false, bufferSize: 1 })\n  );\n\n  constructor(private router: Router) {\n    /** kick off first cycle */\n    this.reload();\n  }\n\n  /**\n   * returns an observable that returns the route information for the\n   * route currently selected. subscribes to route-events to update when needed\n   */\n  getCurrent(): Observable<ScullyRoute> {\n    if (!location) {\n      /** probably not in a browser, no current location available */\n      return of();\n    }\n    /** fire off at start, and when navigation is done. */\n    return merge(of(new NavigationEnd(0, '', '')), this.router.events).pipe(\n      filter((e) => e instanceof NavigationEnd),\n      switchMap(() => this.available$),\n      map((list) => {\n        const curLocation = basePathOnly(encodeURI(location.pathname).trim());\n        return list.find(\n          (r) =>\n            curLocation === basePathOnly(r.route.trim()) ||\n            (r.slugs &&\n              Array.isArray(r.slugs) &&\n              r.slugs.find((slug) =>\n                curLocation.endsWith(basePathOnly(slug.trim()))\n              ))\n        );\n      })\n    );\n  }\n\n  /**\n   * internal, as routes can have multiple slugs, and so occur multiple times\n   * this util function collapses all slugs back into 1 route.\n   */\n  private cleanDups(routes: ScullyRoute[]) {\n    const m = new Map<string, ScullyRoute>();\n    /** check for duplicates by comparing all, include route in comparison if its the only thing, or the only thing with only the tile  */\n    routes.forEach((r) =>\n      m.set(JSON.stringify({ ...r, route: hasOtherprops(r) ? '' : r.route }), r)\n    );\n    return [...m.values()];\n  }\n\n  /** an utility that will force a reload of the `scully-routes.json` file */\n  reload(): void {\n    this.refresh.next();\n  }\n}\n\nfunction hasOtherprops(obj) {\n  const keys = Object.keys(obj);\n  if (keys.length === 1 && keys.includes('route')) {\n    return false;\n  }\n  if (keys.length === 2 && keys.includes('route') && keys.includes('title')) {\n    return false;\n  }\n  return true;\n}\n","/**\n * Returns an array of nodes coninting all the html comments in the element.\n * When a searchText is given this is narrowed down to only comments that contian this text\n * @param rootElem Element to search nto\n * @param searchText optional string that needs to be in a HTML comment\n */\nexport function findComments(rootElem: HTMLElement, searchText?: string) {\n  const comments = [];\n  // Fourth argument, which is actually obsolete according to the DOM4 standard, seems required in IE 11\n  const iterator = document.createNodeIterator(\n    rootElem,\n    NodeFilter.SHOW_COMMENT,\n    {\n      acceptNode: node => {\n        // Logic to determine whether to accept, reject or skip node\n        // In this case, only accept nodes that have content\n        // that is containing our searchText, by rejecting any other nodes.\n        if (\n          searchText &&\n          node.nodeValue &&\n          !node.nodeValue.includes(searchText)\n        ) {\n          return NodeFilter.FILTER_REJECT;\n        }\n        return NodeFilter.FILTER_ACCEPT;\n      }\n    }\n    // , false // IE-11 support requires this parameter.\n  );\n  let curNode;\n  // tslint:disable-next-line: no-conditional-assignment\n  while ((curNode = iterator.nextNode())) {\n    comments.push(curNode);\n  }\n  return comments;\n}\n","import { Location } from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  isDevMode,\n  OnDestroy,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { filter, take, tap } from 'rxjs/operators';\nimport { ScullyDefaultSettings, ScullyLibConfig, SCULLY_LIB_CONFIG } from '../config/scully-config';\nimport { ScullyRoutesService } from '../route-service/scully-routes.service';\nimport { basePathOnly } from '../utils/basePathOnly';\nimport { fetchHttp } from '../utils/fetchHttp';\nimport { findComments } from '../utils/findComments';\n\ninterface ScullyContent {\n  html: string;\n  cssId: string;\n}\ndeclare global {\n  interface Window {\n    scullyContent: ScullyContent;\n  }\n}\n/** this is needed, because otherwise the CLI borks while building */\nconst scullyBegin = '<!--scullyContent-begin-->';\nconst scullyEnd = '<!--scullyContent-end-->';\n\n/** use the module's closure to keep a system-wide check for the last handled URL. */\nlet lastHandled: String;\n\n@Component({\n  // tslint:disable-next-line: component-selector\n  selector: 'scully-content',\n  template: '<ng-content></ng-content>',\n  styles: [\n    `\n      :host {\n        display: none;\n      }\n      scully-content {\n        display: none;\n      }\n    `,\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: true,\n})\nexport class ScullyContentComponent implements OnDestroy, OnInit {\n  baseUrl = this.conf.useTransferState || ScullyDefaultSettings.useTransferState;\n  elm = this.elmRef.nativeElement as HTMLElement;\n  /** pull in all  available routes into an eager promise */\n  routes = this.srs.allRoutes$.pipe(take(1)).toPromise();\n  /** monitor the router, so we can update while navigating in the same 'page' see #311 */\n  routeUpdates$ = this.router.events.pipe(\n    filter((ev) => ev instanceof NavigationEnd),\n    /** don't replace if we are already there */\n    filter((ev: NavigationEnd) => lastHandled && !lastHandled.endsWith(ev.urlAfterRedirects)),\n    tap((r) => this.replaceContent())\n  );\n\n  routeSub = this.routeUpdates$.subscribe();\n\n  constructor(\n    private elmRef: ElementRef,\n    private srs: ScullyRoutesService,\n    private router: Router,\n    private location: Location,\n    @Inject(SCULLY_LIB_CONFIG) private conf: ScullyLibConfig\n  ) {\n    /** do this from constructor, so it runs ASAP */\n  }\n\n  ngOnInit(): void {\n    if (this.elm) {\n      /** this will only fire in a browser environment */\n      this.handlePage();\n    }\n  }\n\n  /**\n   * Loads the static content from scully into the view\n   * Will fetch the content from sibling links with xmlHTTPrequest\n   */\n  private async handlePage() {\n    const curPage = basePathOnly(location.href);\n    if (lastHandled === curPage) {\n      /**\n       * Due to the fix we needed for #311\n       * it might happen that this routine is called\n       * twice for the same page.\n       * this code will make sure the second one is ignored.\n       */\n      return;\n    }\n    lastHandled = curPage;\n    const template = document.createElement('template');\n    const currentCssId = this.getCSSId(this.elm);\n    if (window.scullyContent) {\n      /** upgrade existing static content */\n      const htmlString = window.scullyContent.html;\n      if (currentCssId !== window.scullyContent.cssId) {\n        /** replace the angular cssId */\n        template.innerHTML = htmlString.split(window.scullyContent.cssId).join(currentCssId);\n      } else {\n        template.innerHTML = htmlString;\n      }\n    } else {\n      /**\n       *   NOTE\n       * when updateting the texts for the errors, make sure you leave the\n       *  `id=\"___scully-parsing-error___\"`\n       * in there. That way users can detect rendering errors in their CI\n       * on a reliable way.\n       */\n      await fetchHttp(curPage + '/index.html', 'text')\n        .catch((e) => {\n          if (isDevMode()) {\n            /** in devmode (usually in `ng serve`) check the scully server for the content too */\n            const uri = new URL(location.href);\n            const url = `${this.conf.baseURIForScullyContent}/${basePathOnly(uri.pathname)}/index.html`;\n            return fetchHttp(url, 'text');\n          } else {\n            return Promise.reject(e);\n          }\n        })\n        .then((html: string) => {\n          try {\n            const htmlString = html.split(scullyBegin)[1].split(scullyEnd)[0];\n            if (htmlString.includes('_ngcontent')) {\n              /** update the angular cssId */\n              const atr = '_ngcontent' + htmlString.split('_ngcontent')[1].split('=')[0];\n              template.innerHTML = htmlString.split(atr).join(currentCssId);\n            } else {\n              template.innerHTML = htmlString;\n            }\n          } catch (e) {\n            template.innerHTML = `<h2 id=\"___scully-parsing-error___\">Sorry, could not parse static page content</h2>\n            <p>This might happen if you are not using the static generated pages.</p>`;\n          }\n        })\n        .catch((e) => {\n          template.innerHTML = '<h2 id=\"___scully-parsing-error___\">Sorry, could not load static page content</h2>';\n          console.error('problem during loading static scully content', e);\n        });\n    }\n    /** insert the whole thing just before the `<scully-content>` element */\n    const parent = this.elm.parentElement || document.body;\n    const begin = document.createComment('scullyContent-begin');\n    const end = document.createComment('scullyContent-end');\n    parent.insertBefore(begin, this.elm);\n    parent.insertBefore(template.content, this.elm);\n    parent.insertBefore(end, this.elm);\n    /** upgrade all hrefs to simulated routelinks (in next microtask) */\n    setTimeout(() => document.querySelectorAll('[href]').forEach(this.upgradeToRoutelink.bind(this)), 10);\n    // document.querySelectorAll('[href]').forEach(this.upgradeToRoutelink.bind(this));\n  }\n\n  /**\n   * upgrade a **href** attributes to links that respect the Angular router\n   * and don't do a full page reload. Only works on links that are found in the\n   * Scully route config file.\n   * @param elm the element containing the **hrefs**\n   */\n  async upgradeToRoutelink(elm: HTMLElement) {\n    if (!['A', 'BUTTON'].includes(elm.tagName)) {\n      return;\n    }\n    const hash = elm.dataset.hash;\n    if (hash) {\n      elm.setAttribute('href', '#' + hash);\n      elm.setAttribute('onclick', '');\n      elm.onclick = (ev: MouseEvent) => {\n        ev.preventDefault();\n        const destination = document.getElementById(hash);\n        if (destination) {\n          const url = new URL(window.location.href);\n          url.hash = hash;\n          history.replaceState('', '', url.toString());\n          destination.scrollIntoView();\n        }\n      };\n      return;\n    }\n    const routes = await this.routes;\n    const href = elm.getAttribute('href');\n    const lnk = basePathOnly(href.toLowerCase());\n    const route = routes.find((r) => basePathOnly(r.route.toLowerCase()) === lnk);\n\n    /** only upgrade routes known by scully. */\n    if (lnk && route && !lnk.startsWith('#')) {\n      elm.onclick = async (ev: MouseEvent) => {\n        const splitRoute = route.route.split(`/`);\n        const curSplit = location.pathname.split('/');\n        // loose last \"part\" of route\n        curSplit.pop();\n\n        ev.preventDefault();\n        const routed = await this.router.navigate(splitRoute).catch((e) => {\n          console.error('routing error', e);\n          return false;\n        });\n        if (!routed) {\n          return;\n        }\n\n        /** check for the same route with different \"data\", and NOT a 1 level higher (length), and is not a fragment of th same page */\n        if (curSplit.every((part, i) => splitRoute[i] === part) && splitRoute.length !== curSplit.length + 1) {\n          setTimeout(() => this.replaceContent(), 10); // a small delay, so we are sure the angular parts in the page are settled enough\n        }\n      };\n    }\n  }\n\n  private replaceContent(): void {\n    /**\n     * as Angular doesn't destroy the component if we stay on the same page,\n     * we have to manually delete old content. Also we need to kick of loading\n     * the new content. handlePage() takes care of that.\n     */\n    /** delete the content, as it is now out of date! */\n\n    window.scullyContent = undefined;\n    const parent = this.elm.parentElement;\n    let cur = findComments(parent, 'scullyContent-begin')[0] as ChildNode;\n    while (cur && cur !== this.elm) {\n      const next = cur.nextSibling;\n      parent.removeChild(cur);\n      cur = next;\n    }\n    this.handlePage();\n  }\n\n  getCSSId(elm: HTMLElement) {\n    return elm.getAttributeNames().find((a) => a.startsWith('_ngcontent')) || '';\n  }\n\n  ngOnDestroy() {\n    this.routeSub.unsubscribe();\n    /** reset the lastused */\n    lastHandled = '//';\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ScullyContentComponent } from './scully-content.component';\n\n@NgModule({\n  declarations: [ScullyContentComponent],\n  exports: [ScullyContentComponent]\n})\nexport class ScullyContentModule {}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ScullyDefaultSettings, ScullyLibConfig, SCULLY_LIB_CONFIG } from './config/scully-config';\nimport { IdleMonitorService } from './idleMonitor/idle-monitor.service';\nimport { ScullyContentModule } from './scully-content/scully-content.module';\n\n@NgModule({\n  imports: [ScullyContentModule],\n  exports: [ScullyContentModule],\n})\nexport class ScullyLibModule {\n  /**\n   * We use a little trick to get a working idle-service.\n   * First, we separate out the component in a separate module to prevent a circulair injection\n   * second we create a constuctor that activates the IdleMonitorService. as that is provided for 'root'\n   * there will be only 1 instance in our app.\n   * We don't need forRoot, as we are not configuring anything in here.\n   */\n  static forRoot(config: ScullyLibConfig = ScullyDefaultSettings): ModuleWithProviders<any> {\n    config = Object.assign({}, ScullyDefaultSettings, config);\n    return {\n      ngModule: ScullyLibModule,\n      providers: [{ provide: SCULLY_LIB_CONFIG, useValue: config }],\n    };\n  }\n  constructor(private idle: IdleMonitorService) {}\n}\n"]}