import { Observable } from 'rxjs';
import { Router } from '@angular/router';
export interface ScullyRoute {
    route: string;
    title?: string;
    slugs?: string[];
    published?: boolean;
    slug?: string;
    sourceFile?: string;
    lang?: string;
    [prop: string]: any;
}
export declare class ScullyRoutesService {
    private router;
    private refresh;
    /**
     * An observable with all routes, published and unpublished alike
     */
    allRoutes$: Observable<ScullyRoute[]>;
    /**
     * An observable with available routes (all published routes)
     */
    available$: Observable<ScullyRoute[]>;
    /**
     * an observable with all unpublished routes
     */
    unPublished$: Observable<ScullyRoute[]>;
    /**
     * An observable with the top-level off all published routes.
     * (in an urls it would be `http://www.sample.org/__thisPart__/subroutes`)
     */
    topLevel$: Observable<ScullyRoute[]>;
    constructor(router: Router);
    /**
     * returns an observable that returns the route information for the
     * route currently selected. subscribes to route-events to update when needed
     */
    getCurrent(): Observable<ScullyRoute>;
    /**
     * internal, as routes can have multiple slugs, and so occur multiple times
     * this util function collapses all slugs back into 1 route.
     */
    private cleanDups;
    /** an utility that will force a reload of the `scully-routes.json` file */
    reload(): void;
}
