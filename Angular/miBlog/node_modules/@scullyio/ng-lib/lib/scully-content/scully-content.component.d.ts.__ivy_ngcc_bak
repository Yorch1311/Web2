import { Location } from '@angular/common';
import { ElementRef, OnDestroy, OnInit } from '@angular/core';
import { NavigationEnd, Router } from '@angular/router';
import { ScullyLibConfig } from '../config/scully-config';
import { ScullyRoutesService } from '../route-service/scully-routes.service';
interface ScullyContent {
    html: string;
    cssId: string;
}
declare global {
    interface Window {
        scullyContent: ScullyContent;
    }
}
export declare class ScullyContentComponent implements OnDestroy, OnInit {
    private elmRef;
    private srs;
    private router;
    private location;
    private conf;
    baseUrl: boolean;
    elm: HTMLElement;
    /** pull in all  available routes into an eager promise */
    routes: Promise<import("../route-service/scully-routes.service").ScullyRoute[]>;
    /** monitor the router, so we can update while navigating in the same 'page' see #311 */
    routeUpdates$: import("rxjs").Observable<NavigationEnd>;
    routeSub: import("rxjs").Subscription;
    constructor(elmRef: ElementRef, srs: ScullyRoutesService, router: Router, location: Location, conf: ScullyLibConfig);
    ngOnInit(): void;
    /**
     * Loads the static content from scully into the view
     * Will fetch the content from sibling links with xmlHTTPrequest
     */
    private handlePage;
    /**
     * upgrade a **href** attributes to links that respect the Angular router
     * and don't do a full page reload. Only works on links that are found in the
     * Scully route config file.
     * @param elm the element containing the **hrefs**
     */
    upgradeToRoutelink(elm: HTMLElement): Promise<void>;
    private replaceContent;
    getCSSId(elm: HTMLElement): string;
    ngOnDestroy(): void;
}
export {};
