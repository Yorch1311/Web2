{"version":3,"file":"scully-content.component.d.ts","sources":["scully-content.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["import { Location } from '@angular/common';\nimport { ElementRef, OnDestroy, OnInit } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { ScullyLibConfig } from '../config/scully-config';\nimport { ScullyRoutesService } from '../route-service/scully-routes.service';\ninterface ScullyContent {\n    html: string;\n    cssId: string;\n}\ndeclare global {\n    interface Window {\n        scullyContent: ScullyContent;\n    }\n}\nexport declare class ScullyContentComponent implements OnDestroy, OnInit {\n    private elmRef;\n    private srs;\n    private router;\n    private location;\n    private conf;\n    baseUrl: boolean;\n    elm: HTMLElement;\n    /** pull in all  available routes into an eager promise */\n    routes: Promise<import(\"../route-service/scully-routes.service\").ScullyRoute[]>;\n    /** monitor the router, so we can update while navigating in the same 'page' see #311 */\n    routeUpdates$: import(\"rxjs\").Observable<NavigationEnd>;\n    routeSub: import(\"rxjs\").Subscription;\n    constructor(elmRef: ElementRef, srs: ScullyRoutesService, router: Router, location: Location, conf: ScullyLibConfig);\n    ngOnInit(): void;\n    /**\n     * Loads the static content from scully into the view\n     * Will fetch the content from sibling links with xmlHTTPrequest\n     */\n    private handlePage;\n    /**\n     * upgrade a **href** attributes to links that respect the Angular router\n     * and don't do a full page reload. Only works on links that are found in the\n     * Scully route config file.\n     * @param elm the element containing the **hrefs**\n     */\n    upgradeToRoutelink(elm: HTMLElement): Promise<void>;\n    private replaceContent;\n    getCSSId(elm: HTMLElement): string;\n    ngOnDestroy(): void;\n}\nexport {};\n"]}