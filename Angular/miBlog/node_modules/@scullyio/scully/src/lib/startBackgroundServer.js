"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.startBackgroundServer = void 0;
const child_process_1 = require("child_process");
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const captureMessage_1 = require("./utils/captureMessage");
const cli_options_1 = require("./utils/cli-options");
const log_1 = require("./utils/log");
const baseBinary = path_1.join(__dirname, '..', 'scully.js');
function startBackgroundServer(scullyConfig) {
    const binary = fs_extra_1.existsSync(baseBinary)
        ? baseBinary
        : ['/dist/scully/src/scully', '/node_modules/.bin/scully', '/node_modules/@scullyio/scully/src/scully']
            .map((p) => path_1.join(scullyConfig.homeFolder, p + '.js'))
            .find((p) => fs_extra_1.existsSync(p));
    if (!binary) {
        log_1.logError('Could not find scully binaries');
        process.exit(15);
        return;
    }
    const options = [
        binary,
        `serve`,
        '--tds',
        cli_options_1.tds ? 'true' : 'false',
        '--pjf',
        cli_options_1.pjFirst ? 'true' : 'false',
        '--ls',
        cli_options_1.logSeverity,
        '--noCache',
        'true',
    ];
    if (cli_options_1.configFileName) {
        options.push('--cf');
        options.push(cli_options_1.configFileName);
    }
    else {
        options.push('--project');
        options.push(scullyConfig.projectName);
    }
    if (cli_options_1.handle404) {
        options.push('--404');
        options.push(cli_options_1.handle404);
    }
    if (cli_options_1.port) {
        options.push('--port');
        options.push(String(cli_options_1.port));
    }
    if (cli_options_1.disableProjectFolderCheck) {
        options.push('--disableProjectFolderCheck');
    }
    log_1.log(`Starting background servers with: node ${options.join(' ')}`);
    child_process_1.spawn('node', options, {
        detached: true,
    }).on('close', (code) => {
        if (+code > 0) {
            const message = 'Problem starting background servers ' + code;
            log_1.logError(message);
            captureMessage_1.captureMessage(message);
            process.exit(15);
        }
    });
    log_1.log(` ${log_1.green('â˜º')}   Started servers in background`);
}
exports.startBackgroundServer = startBackgroundServer;
//# sourceMappingURL=startBackgroundServer.js.map