"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.injectHtml = exports.scullyEnd = exports.scullyBegin = void 0;
const jsdom_1 = require("jsdom");
const utils_1 = require("../../utils");
const log_1 = require("../../utils/log");
const findComments_1 = require("./findComments");
const getScript_1 = require("./getScript");
exports.scullyBegin = '<!--scullyContent-begin-->';
exports.scullyEnd = '<!--scullyContent-end-->';
function injectHtml(dom, additionalHTML, route) {
    var _a;
    const { window } = dom;
    const { document } = window;
    const scullyContent = document.querySelector('scully-content');
    if (scullyContent == null) {
        log_1.logWarn(`
      ----------------
      Error, missing "${log_1.yellow('<scully-content>')}" in route "${log_1.yellow(route.route)}"
      without <scully-content> we can not render this route.
      Make sure it is in there, and not inside any conditionals (*ngIf)
      You can check this by opening "${log_1.yellow(`http${utils_1.ssl ? 'S' : ''}://localhost:4200/${route.route.replace(/^\//, '')}`)}"
      when you serve your app with ${log_1.yellow('ng serve')} and then in the browsers console run:
      ${log_1.yellow(`document.querySelector('scully-content')`)}
      ----------------
      `);
        return dom;
    }
    try {
        const parent = scullyContent.parentNode;
        const ngContentIndentiefier = (_a = Array.from(scullyContent.attributes).find(({ name }) => name.startsWith('_ngcon'))) === null || _a === void 0 ? void 0 : _a.name;
        const placeholder = document.createElement('div');
        placeholder.innerHTML = additionalHTML;
        /** add the ng-content id to all the elements in the fragment. */
        addContentId(placeholder, ngContentIndentiefier);
        /** find the comment nodes where we are going to insert */
        const beginNode = findComments_1.findComments(parent, 'scullyContent-begin');
        const endNode = findComments_1.findComments(parent, 'scullyContent-end');
        /** remove existing content between comment nodes */
        let next = beginNode.nextSibling;
        while (next !== endNode && next !== parent.lastChild) {
            next.remove();
            next = beginNode.nextSibling;
        }
        /** move in the new content */
        while (placeholder.firstChild) {
            parent.insertBefore(placeholder.firstChild, endNode);
        }
        /** add the script that will update the content after angular starts. */
        const script = document.createElement('script');
        script.textContent = getScript_1.getScript(ngContentIndentiefier);
        parent.appendChild(script);
    }
    catch (e) {
        /** let the developer know something went haywire. */
        log_1.logWarn(`Error, while rendering text content into route "${log_1.yellow(route.route)}", ${e.message}`);
        return new jsdom_1.JSDOM(`<h1>Error during processing of scully content</h1>
      <p> Error: "${e.toString()}" was raised while we tried to insert scully-content</p>`);
    }
    return dom;
}
exports.injectHtml = injectHtml;
function addContentId(elm, id) {
    if (id) {
        /** add the ng-content id to all the elements in the fragment. */
        const document = elm.ownerDocument;
        const walk = document.createTreeWalker(elm);
        let cur = walk.currentNode;
        while (cur) {
            if (cur.nodeType === 1) {
                cur.setAttribute(id, '');
            }
            cur = walk.nextNode();
        }
    }
}
//# sourceMappingURL=injectHtml.js.map