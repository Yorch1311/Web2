"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const pluginRepository_1 = require("../pluginManagement/pluginRepository");
const utils_1 = require("../utils/");
const utils_2 = require("../utils");
const seoHrefPlugin = async (dom, route) => {
    try {
        const routes = await utils_2.getHandledRoutes;
        const { window } = dom;
        const anchors = window.document.querySelectorAll('a[href]');
        anchors.forEach((a) => {
            const href = a.getAttribute('href');
            const isExternal = routes.find((r) => r.route === basePathOnly(href)) === undefined;
            /** Add noopener and noreferrer to _blank links */
            if ((href && a.getAttribute('target') === '_blank') || isExternal) {
                /** get the attribute add the options and filter out duplicates */
                if ((!href.includes('?') && !href.includes('#') && href.startsWith('//')) || href.startsWith('http')) {
                    /** only upgrade links that are not startting with '/'   */
                    const rel = ((a.getAttribute('rel') || '') + ' noreferrer noopener')
                        .trim()
                        .split(' ')
                        .filter((v, i, a) => a.indexOf(v) === i)
                        .join(' ');
                    a.setAttribute('rel', rel);
                }
            }
            if (!isExternal && !href.endsWith('/') && !href.includes('?') && !href.includes('#')) {
                /** don't handle routes that are not inside our app. */
                a.setAttribute('href', href + '/');
            }
            /** add the trailing slash */
        });
    }
    catch (e) {
        console.log(e);
        utils_1.logWarn(`Error in the seoHrefOptimise plugin, didn't update href's for route: "${utils_1.yellow(route.route)}"`);
    }
    return dom;
};
pluginRepository_1.registerPlugin('postProcessByDom', 'seoHrefOptimise', seoHrefPlugin);
/** copied from ng-lib  */
function basePathOnly(str) {
    if (str.includes('#')) {
        str = str.split('#')[0];
    }
    if (str.includes('?')) {
        str = str.split('?')[0];
    }
    const cleanedUpVersion = str.endsWith('/') ? str.slice(0, -1) : str;
    return cleanedUpVersion === '' ? '/' : cleanedUpVersion;
}
//# sourceMappingURL=seoHrefCompletionPlugin.js.map