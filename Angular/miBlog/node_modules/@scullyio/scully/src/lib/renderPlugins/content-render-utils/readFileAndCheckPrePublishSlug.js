"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.readFileAndCheckPrePublishSlug = void 0;
/* eslint-disable no-prototype-builtins */
const fs_1 = require("fs");
const yamljs_1 = require("yamljs");
const randomString_1 = require("../../utils/randomString");
const utils_1 = require("../../utils");
// eslint-disable-next-line @typescript-eslint/no-var-requires
const fm = require('front-matter');
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
async function readFileAndCheckPrePublishSlug(file) {
    const prependString = '___UNPUBLISHED___';
    const createSlug = () => `${prependString}${Date.now().toString(36)}_${randomString_1.randomString(32)}`;
    const originalFile = fs_1.readFileSync(file, 'utf-8');
    const { attributes: meta, body: fileContent } = fm(originalFile);
    let prePublished = false;
    if (fileContent.trim() === '') {
        utils_1.logWarn(`Content file "${utils_1.yellow(file)}" has no content!`);
    }
    if (meta.hasOwnProperty('publish date') || meta.hasOwnProperty('publish-date') || meta.hasOwnProperty('publishDate')) {
        const date = meta['publish date'] || meta['publish-date'] || meta['publishDate'];
        // check if there is a valid date (getTime on invalid date returns NaN)
        if (date instanceof Date && date.getTime() === date.getTime()) {
            const published = date.getTime() <= new Date().getTime();
            if (published && meta.hasOwnProperty('published') && meta.published === false) {
                /** no need to update when its published anyway already! */
                updateFileWithNewMeta({ ...meta, published });
            }
            /** make sure internal published reflects the state of the published date */
            meta.published = published;
        }
    }
    if (meta.hasOwnProperty('published') && meta.published === false) {
        /** this post needs an pre-publish slug */
        const slugs = Array.isArray(meta.slugs) ? meta.slugs : [];
        let unPublishedSlug = slugs.find((sl) => sl.startsWith(prependString));
        if (!unPublishedSlug) {
            /** there is no prepub slug so create one and update the file */
            unPublishedSlug = createSlug();
            updateFileWithNewMeta({ ...meta, slugs: slugs.concat(unPublishedSlug) });
        }
        prePublished = true;
        /** overwrite slug from file with prepub only in memory. we don't want a file with the original slug name now. */
        meta.slug = unPublishedSlug;
    }
    return { meta, fileContent, prePublished };
    function updateFileWithNewMeta(newMeta) {
        /** only update file on actual changes. */
        if (yamljs_1.stringify(meta) !== yamljs_1.stringify(newMeta)) {
            /** string literal, don't format "correctly" or things will break ;) */
            const newFile = `---
${yamljs_1.stringify(newMeta).trim()}
---

${fileContent.trimStart()}`;
            fs_1.writeFileSync(file, newFile);
        }
    }
}
exports.readFileAndCheckPrePublishSlug = readFileAndCheckPrePublishSlug;
//# sourceMappingURL=readFileAndCheckPrePublishSlug.js.map