import { Serializable } from 'puppeteer';
import { PluginTypes } from './Plugin.interfaces';
export declare const backupData: string;
export declare const routeConfigData: string;
export declare const resetConfig: string;
interface SetPluginConfig {
    <T>(name: string | symbol, configData: T): void;
    <T>(name: string | symbol, type: PluginTypes, configData: T): void;
    (name: string | symbol, configData: Serializable): void;
    (name: string | symbol, type: PluginTypes, configData: Serializable): void;
}
export declare const setPluginConfig: SetPluginConfig;
export declare const getPluginConfig: <T>(name: string | symbol, type?: PluginTypes) => T;
export declare function fetchPlugins(name: string | symbol, type?: PluginTypes): Function[];
export declare function findPlugin(name: string | symbol, type?: PluginTypes, errorOnNotfound?: boolean): Function;
export declare function hasPlugin(name: string | symbol, type?: PluginTypes): boolean;
export declare const getConfig: <T>(plugin: any) => T;
export declare const setConfig: <T>(plugin: any, config: any) => void;
/**
 * @param type
 * @param name
 * @param config
 */
export declare const routePluginConfig: (route: string, name: string, typeOrConfig: PluginTypes | Serializable, config?: any) => void;
export {};
