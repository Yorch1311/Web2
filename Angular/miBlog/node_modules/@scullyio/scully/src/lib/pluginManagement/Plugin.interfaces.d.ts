import { JSDOM } from 'jsdom';
import { HandledRoute } from '../routerPlugins/handledRoute.interface';
import { AlternateExtensionsForFilePlugin, configValidator, routeProcessPriority } from './pluginRepository';
export declare type ScullySystem = `scullySystem`;
export declare type ErrorString = string;
export declare type ConfigValidator = (RouteConfig: any) => ErrorString[] | Promise<ErrorString[]>;
export declare type RoutePlugin = {
    (route?: string, config?: any): Promise<HandledRoute[]>;
    [configValidator]?: ConfigValidator | undefined;
};
export declare type PluginFunction = (...args: any[]) => any;
export declare type postProcessByDomPlugin = (dom?: JSDOM, route?: HandledRoute) => Promise<JSDOM>;
export declare type postProcessByHtmlPlugin = (html?: string, route?: HandledRoute) => Promise<string>;
export declare type RouteProcess = {
    (routes?: HandledRoute[]): Promise<HandledRoute[]>;
    [routeProcessPriority]?: number;
};
export declare type RouteDiscoveryPlugin = (routes?: HandledRoute[]) => Promise<void>;
export declare type AllDonePlugin = (routes?: HandledRoute[]) => Promise<void>;
export declare type FilePlugin = {
    (html: string, route?: HandledRoute): Promise<string>;
    [AlternateExtensionsForFilePlugin]?: string[];
};
export declare type ScullySystemPlugin = PluginFunction;
export declare type EnterprisePlugin = PluginFunction;
export interface Plugins {
    allDone: {
        [name: string]: AllDonePlugin;
    };
    enterprise: {
        [pluginSymbol: string]: EnterprisePlugin;
    };
    fileHandler: {
        [fileExtension: string]: FilePlugin;
    };
    postProcessByDom: {
        [name: string]: postProcessByDomPlugin;
    };
    postProcessByHtml: {
        [name: string]: postProcessByHtmlPlugin;
    };
    render: {
        [name: string]: postProcessByHtmlPlugin;
    };
    routeDiscoveryDone: {
        [name: string]: RouteDiscoveryPlugin;
    };
    routeProcess: {
        [name: string]: RouteProcess;
    };
    router: {
        [name: string]: RoutePlugin;
    };
    scullySystem: {
        [pluginSymbol: string]: ScullySystemPlugin;
    };
}
export interface PluginFuncs {
    allDone: AllDonePlugin;
    enterprise: EnterprisePlugin;
    fileHandler: FilePlugin;
    postProcessByDom: postProcessByDomPlugin;
    postProcessByHtml: postProcessByHtmlPlugin;
    render: postProcessByHtmlPlugin;
    routeDiscoveryDone: RouteDiscoveryPlugin;
    routeProcess: RouteProcess;
    router: RoutePlugin;
    scullySystem: ScullySystemPlugin;
}
export declare type PluginTypes = keyof Plugins;
export interface RegisterOptions {
    replaceExistingPlugin?: boolean;
}
