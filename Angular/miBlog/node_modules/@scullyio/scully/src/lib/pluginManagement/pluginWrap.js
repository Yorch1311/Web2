"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.wrap = void 0;
/* eslint-disable no-fallthrough */
const perf_hooks_1 = require("perf_hooks");
const cli_options_1 = require("../utils/cli-options");
const log_1 = require("../utils/log");
const captureMessage_1 = require("../utils/captureMessage");
const performanceIds_1 = require("../utils/performanceIds");
const pluginConfig_1 = require("./pluginConfig");
const pluginRepository_1 = require("./pluginRepository");
let flushingServerLogs = false;
let typeId = 0;
/**
 * Wrapper function. Runs all plugins in a wrapper, so we can do a try-catch, and do tme measurements.
 * @param type
 * @param name
 * @param plugin
 * @param args
 */
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
async function wrap(type, name, plugin, args) {
    if (flushingServerLogs) {
        return;
    }
    const displayName = typeof name === 'string' ? name : name.description;
    let id = `plugin-${type}:${displayName}-`;
    let currentRoute = '';
    // tslint:disable: no-switch-case-fall-through
    switch (type) {
        case 'router':
            id += args[0];
            currentRoute = args[0];
        case 'render':
        case 'postProcessByHtml':
        case 'postProcessByDom':
            id += args[1].route;
            currentRoute = args[1].route;
        case 'fileHandler':
            id += args[0].templateFile || '';
            currentRoute = args[1].route;
        default:
            id += typeId++;
    }
    perf_hooks_1.performance.mark('start' + id);
    let result;
    let customConfig = false;
    try {
        if (plugin[pluginConfig_1.routeConfigData] && plugin[pluginConfig_1.routeConfigData][currentRoute]) {
            plugin[pluginRepository_1.configData] = plugin[pluginConfig_1.routeConfigData][currentRoute];
            customConfig = true;
        }
        result = await plugin(...args);
    }
    catch (e) {
        if (flushingServerLogs) {
            return;
        }
        log_1.logError(` The ${type} plugin "${log_1.yellow(displayName)} has thrown the below error,
              while trying to render route "${log_1.yellow(currentRoute || 'unknown')}"
              ${cli_options_1.pluginsError ? 'Scully will exit' : 'Results are ignored.'}`);
        log_1.logWrite(e);
        if (cli_options_1.pluginsError) {
            // we need to flush the error before our process exit
            // we don't have a way to surface plugin config errors before running all of the plugins
            flushingServerLogs = true;
            // sending
            captureMessage_1.captureException(e);
            await captureMessage_1.flush();
            process.exit(15);
        }
    }
    finally {
        if (customConfig) {
            plugin[pluginRepository_1.configData] = plugin[pluginConfig_1.backupData];
        }
    }
    perf_hooks_1.performance.mark('stop' + id);
    performanceIds_1.performanceIds.add(id);
    return result;
}
exports.wrap = wrap;
//# sourceMappingURL=pluginWrap.js.map