"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerPlugin = exports.pluginTypes = exports.plugins = exports.scullySystem = exports.routeProcessPriority = exports.accessPluginDirectly = exports.AlternateExtensionsForFilePlugin = exports.configData = exports.configValidator = void 0;
const log_1 = require("../utils/log");
const pluginConfig_1 = require("./pluginConfig");
const pluginWrap_1 = require("./pluginWrap");
exports.configValidator = Symbol('configValidator');
exports.configData = `___Scully_config_for_plugin___`;
exports.AlternateExtensionsForFilePlugin = Symbol('altfileextension');
exports.accessPluginDirectly = Symbol('accessPluginDirectly');
exports.routeProcessPriority = Symbol('routeProcessPriority');
exports.scullySystem = `scullySystem`;
const postProcessByHtml = {};
exports.plugins = {
    allDone: {},
    enterprise: {},
    fileHandler: {},
    postProcessByDom: {},
    postProcessByHtml: postProcessByHtml,
    render: postProcessByHtml,
    routeDiscoveryDone: {},
    routeProcess: {},
    router: {},
    scullySystem: {},
};
exports.pluginTypes = [
    'allDone',
    'enterprise',
    'fileHandler',
    'postProcessByDom',
    'postProcessByHtml',
    'render',
    'routeDiscoveryDone',
    'routeProcess',
    'router',
    'scullySystem',
];
/** type helpers for registerPlugin */
exports.registerPlugin = (type, name, plugin, pluginOptions, { replaceExistingPlugin = false } = {}) => {
    const displayName = typeof name === 'string' ? name : name.description;
    switch (type) {
        case 'fileHandler':
            plugin[exports.AlternateExtensionsForFilePlugin] = Array.isArray(pluginOptions) ? pluginOptions : [];
            break;
        case 'router':
            plugin[exports.configValidator] = typeof pluginOptions === 'function' ? pluginOptions : () => [];
            break;
        case 'routeProcess':
            plugin[exports.routeProcessPriority] = typeof pluginOptions === 'number' ? pluginOptions : 100;
            break;
        case 'render':
            log_1.logWarn(`Using deprecated plugin type:"${log_1.yellow('render')}"  use "${log_1.yellow('postProcessByHtml')}" instead`);
            break;
        case 'allDone':
        case 'enterprise':
        case 'postProcessByHtml':
        case 'postProcessByDom':
        case 'routeDiscoveryDone':
        case 'scullySystem':
            break;
        default:
            assertNeverForPluginType(type, displayName);
    }
    if (replaceExistingPlugin === false && pluginConfig_1.hasPlugin(name, type)) {
        throw new Error(`Plugin ${displayName} already exists`);
    }
    const wrapper = ((...args) => pluginWrap_1.wrap(type, name, plugin, args));
    /** keep a reference for future use. */
    wrapper[exports.accessPluginDirectly] = plugin;
    // plugins[type][name] = wrapper;
    Object.assign(exports.plugins[type], exports.plugins[type], { [name]: wrapper });
};
//TODO: figure out why we need string type here.
function assertNeverForPluginType(type, name) {
    throw new Error(`
  ----------------------------------------------------------------------------------------------
    Type "${log_1.yellow(type)}" is not a known plugin type for registering plugin "${log_1.yellow(name)}".
    The first parameter of registerPlugin needs to be one of:
    'fileHandler', 'router', 'render', 'postProcessByDom', 'routeProcess', 'allDone', 'enterprise', or 'routeDiscoveryDone'
  ----------------------------------------------------------------------------------------------
  `);
}
//# sourceMappingURL=pluginRepository.js.map