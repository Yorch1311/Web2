"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const pluginRepository_1 = require("../pluginManagement/pluginRepository");
const pluginConfig_1 = require("../pluginManagement/pluginConfig");
const marked_1 = __importDefault(require("marked"));
// ------------------------------
// Syntax Highlighting
const Prism = require('prismjs');
require("prismjs/components/prism-bash");
require("prismjs/components/prism-css");
require("prismjs/components/prism-javascript");
require("prismjs/components/prism-json");
require("prismjs/components/prism-markup");
require("prismjs/components/prism-markdown");
require("prismjs/components/prism-typescript");
require("prismjs/components/prism-jsx");
require("prismjs/components/prism-tsx");
require("prismjs/components/prism-docker");
const renderer = new marked_1.default.Renderer();
// wrap code block the way Prism.js expects it
renderer.code = function (code, lang, escaped) {
    code = this.options.highlight(code, lang);
    if (!lang) {
        return '<pre><code>' + code + '</code></pre>';
    }
    // e.g. "language-js"
    const langClass = 'language-' + lang;
    return '<pre class="' + langClass + '"><code class="' + langClass + '">' + code + '</code></pre>';
};
const markdownPlugin = async (raw) => {
    const config = pluginConfig_1.getConfig(markdownPlugin);
    if (config.enableSyntaxHighlighting) {
        marked_1.default.setOptions({
            renderer,
            highlight: (code, lang) => {
                lang = lang || 'typescript';
                if (!Prism.languages[lang]) {
                    console.error(`Language '${lang}' is not available in Prism.js, ignoring syntax highlighting for this code block.`);
                    return code;
                }
                return Prism.highlight(code, Prism.languages[lang]);
            },
            pedantic: false,
            gfm: true,
            breaks: false,
            sanitize: false,
            smartLists: true,
            smartypants: false,
            xhtml: false,
        });
    }
    return marked_1.default(raw);
};
pluginConfig_1.setConfig(markdownPlugin, {
    enableSyntaxHighlighting: false,
});
pluginRepository_1.registerPlugin('fileHandler', 'md', markdownPlugin, ['markdown']);
//# sourceMappingURL=markdown.js.map