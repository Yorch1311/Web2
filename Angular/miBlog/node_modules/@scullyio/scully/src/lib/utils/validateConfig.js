"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkFolderExists = exports.validateConfig = void 0;
/* eslint-disable no-prototype-builtins */
const fs_1 = require("fs");
const path_1 = require("path");
const pluginRepository_1 = require("../pluginManagement/pluginRepository");
const config_1 = require("./config");
const log_1 = require("./log");
const cli_options_1 = require("./cli-options");
// import {configFileName} from './compileConfig';
// TODO: make sure all route options are validated.
let hasErrors = false;
const error = (...args) => {
    hasErrors = true;
    log_1.logError(...args);
};
async function validateConfig(config) {
    // log(`Checking "${yellow('scully.json')}"`);
    /** make sure the config is completely loaded */
    // await loadConfig;
    const result = { routes: {} };
    if (config.routes) {
        await Promise.all(Object.entries(config.routes).map(async ([route, definition]) => {
            if (!definition.type) {
                error(`Type missing in route "${log_1.yellow(route)}"`);
            }
            if (!pluginRepository_1.plugins.router.hasOwnProperty(definition.type)) {
                error(`Unknown type "${log_1.yellow(definition.type)}" in route "${log_1.yellow(route)}"`);
            }
            else {
                const curPlugin = pluginRepository_1.plugins.router[definition.type][pluginRepository_1.accessPluginDirectly];
                const pluginErrors = (curPlugin && curPlugin[pluginRepository_1.configValidator] && (await curPlugin[pluginRepository_1.configValidator](definition))) || [];
                if (pluginErrors.length) {
                    error(`Route ${log_1.yellow(route)} has the following configuration issue(s): ${pluginErrors.map((errMsg, i) => `\n   ${i + 1} ${errMsg}`)}
                  `);
                }
            }
            result.routes[route] = definition;
        }));
    }
    else {
        log_1.logWarn(`No routes defined in "${log_1.yellow(cli_options_1.configFileName)}"`);
    }
    if (hasErrors) {
        /** stop everything if there are errors in the config. */
        process.exit(0);
    }
    return result;
}
exports.validateConfig = validateConfig;
function checkFolderExists(folder) {
    return fs_1.existsSync(path_1.join(config_1.angularRoot, folder));
}
exports.checkFolderExists = checkFolderExists;
//# sourceMappingURL=validateConfig.js.map