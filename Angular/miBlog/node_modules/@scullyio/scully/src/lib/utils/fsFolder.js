"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.existFolder = exports.checkStaticFolder = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const watchMode_1 = require("../watchMode");
const config_1 = require("./config");
const log_1 = require("./log");
// tslint:disable-next-line:no-shadowed-variable
async function checkStaticFolder() {
    try {
        const config = config_1.scullyConfig.routes; // require(join(scullyConfig.homeFolder, 'scully.config.js'));
        const folder = [];
        // tslint:disable-next-line:forin
        for (const property in config) {
            if (config[property].type === 'contentFolder') {
                // tslint:disable-next-line:forin
                for (const slug in config[property]) {
                    if (config[property][slug].folder !== undefined) {
                        // @ts-ignore
                        const fileName = config[property][slug].folder.replace('./', '');
                        if (!folder.find((f) => f === fileName)) {
                            folder.push(fileName);
                            if (existFolder(fileName)) {
                                reWatch(fileName, property);
                            }
                            else {
                                log_1.log(`${log_1.red(`${fileName} folder not found`)}.`);
                            }
                        }
                    }
                }
            }
        }
    }
    catch (e) {
        console.log('error into read the config', e);
    }
}
exports.checkStaticFolder = checkStaticFolder;
function reWatch(folder, url) {
    const filename = path_1.join(folder);
    watchFolder(filename)
        .pipe(operators_1.throttleTime(10000))
        .subscribe({
        next: (v) => {
            console.log('--------------------------------------------------');
            console.log(`New ${v.eventType} in ${v.fileName}, re run scully.`);
            console.log('--------------------------------------------------');
            watchMode_1.startScullyWatchMode(url);
        },
    });
}
function watchFolder(folder) {
    console.log('--------------------------------------------------');
    console.log(`Watching ${folder} for change.`);
    console.log('--------------------------------------------------');
    return new rxjs_1.Observable((obs) => {
        let watcher;
        try {
            watcher = fs_1.watch(folder, (event, fname) => {
                obs.next({ eventType: event, fileName: fname });
            });
        }
        catch (e) {
            obs.error(e);
        }
        return () => watcher.close();
    });
}
function existFolder(src) {
    try {
        return fs_1.existsSync(src);
    }
    catch (e) {
        return false;
    }
}
exports.existFolder = existFolder;
//# sourceMappingURL=fsFolder.js.map