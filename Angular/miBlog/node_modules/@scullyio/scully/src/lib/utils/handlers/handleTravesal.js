"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleTravesal = void 0;
const perf_hooks_1 = require("perf_hooks");
const pluginConfig_1 = require("../../pluginManagement/pluginConfig");
const traverseAppRoutesPlugin_1 = require("../../routerPlugins/traverseAppRoutesPlugin");
const cache_1 = require("../cache");
const log_1 = require("../log");
const performanceIds_1 = require("../performanceIds");
const pluginManagement_1 = require("../../pluginManagement");
exports.handleTravesal = Symbol('handleTravesal');
pluginManagement_1.registerPlugin(pluginManagement_1.scullySystem, exports.handleTravesal, plugin);
async function plugin({ forceScan } = { forceScan: false }) {
    let unhandledRoutes;
    if (forceScan) {
        cache_1.flushRawRoutesCache();
    }
    if (cache_1.rawRoutesCache.size === 0) {
        log_1.log('Finding all routes in application.');
        perf_hooks_1.performance.mark('startTraverse');
        unhandledRoutes = await pluginConfig_1.findPlugin(traverseAppRoutesPlugin_1.traverseAppRoutes)();
        perf_hooks_1.performance.mark('stopTraverse');
        performanceIds_1.performanceIds.add('Traverse');
        unhandledRoutes.forEach((r) => cache_1.rawRoutesCache.add(r));
    }
    else {
        unhandledRoutes = [...cache_1.rawRoutesCache.keys()];
    }
    if (unhandledRoutes.length < 1) {
        log_1.logWarn('No routes found in application, are you sure you installed the router? Terminating.');
        process.exit(15);
    }
    return unhandledRoutes;
}
//# sourceMappingURL=handleTravesal.js.map