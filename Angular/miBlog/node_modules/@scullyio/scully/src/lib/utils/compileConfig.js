"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.compileConfig = void 0;
const child_process_1 = require("child_process");
const fs_1 = require("fs");
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const typescript_1 = require("typescript");
const cli_options_1 = require("./cli-options");
const exitHandler_1 = require("./exitHandler");
const findAngularJsonPath_1 = require("./findAngularJsonPath");
const log_1 = require("./log");
const read_angular_json_1 = require("./read-angular-json");
const scullydot_1 = require("./scullydot");
const angularRoot = findAngularJsonPath_1.findAngularJsonPath();
const angularConfig = read_angular_json_1.readAngularJson();
const defaultProjectName = angularConfig.defaultProject;
const createConfigName = (name = defaultProjectName) => `scully.${name}.config.ts`;
const getJsName = (name) => name.replace('.ts', '.js');
exports.compileConfig = async () => {
    let path;
    try {
        path = path_1.join(angularRoot, createConfigName());
        if (cli_options_1.configFileName) {
            path = path_1.join(angularRoot, cli_options_1.configFileName);
        }
        if (cli_options_1.project) {
            path = path_1.join(angularRoot, createConfigName(cli_options_1.project));
        }
        if (!(await fs_extra_1.pathExists(path))) {
            /** no js config, nothing to do. */
            log_1.logWarn(`
      =====================================================================================================
      Config file "${log_1.yellow(path)}" not found, only rendering routes without parameters
      The config file should have a name that is formated as:
          scully.${log_1.yellow('<projectName>')}.config.ts
      where ${log_1.yellow('<projectName>')} is the name of the project as defined in the 'angular.json' file
      If you meant to build a different project as ${log_1.yellow(cli_options_1.project || 'undefined')} you can use:
          ${log_1.white('--project differentProjectName')} as a cmd line option

      When you are in a mixed mono-repo you might need to use the ${log_1.white('--pjFirst')} flag.
       which will look for package.json instead of angular.json to find the 'root' of the project.
    =====================================================================================================
`);
            return {
                projectName: cli_options_1.project || defaultProjectName,
            };
        }
        /** skip compiling if it exists */
        const jsFile = getJsName(path);
        if (!fs_1.existsSync(jsFile)) {
            await compileTSConfig(path);
        }
        const { config } = await Promise.resolve().then(() => __importStar(require(getJsName(path))));
        /** dispose of the temporary JS file on exit of the application, so it can be reused by multiple processes */
        const removeConfigJsFile = () => {
            if (fs_1.existsSync(jsFile)) {
                fs_1.unlinkSync(jsFile);
            }
        };
        exitHandler_1.registerExitHandler(removeConfigJsFile);
        if (typeof config.then === 'function') {
            return { projectName: cli_options_1.project || defaultProjectName, ...(await config) };
        }
        return { projectName: cli_options_1.project || defaultProjectName, ...config };
    }
    catch (e) {
        log_1.logError(`
---------
 We encountered an error executing the config file. "${log_1.yellow(path)}"
 Check the error below, and try again later
--------- `);
        console.error(e);
        process.exit(15);
    }
};
async function compileUserPluginsAndConfig() {
    const persistentFolder = scullydot_1.readDotProperty('pluginFolder');
    let folder = persistentFolder || cli_options_1.pluginFolder;
    if (cli_options_1.pluginFolder !== './scully' && cli_options_1.pluginFolder !== persistentFolder) {
        /** store setting  */
        scullydot_1.writeDotProperty('pluginFolder', cli_options_1.pluginFolder);
        folder = cli_options_1.pluginFolder;
    }
    log_1.log(`using plugins from folder "${log_1.yellow(folder)}"`);
    const useFolder = path_1.join(angularRoot, folder);
    const configPath = typescript_1.findConfigFile(useFolder, typescript_1.sys.fileExists, 'tsconfig.json');
    if (!fs_1.existsSync(path_1.join(useFolder, 'tsconfig.json'))) {
        // no userstuff to handle
        return;
    }
    try {
        const tsConfig = typescript_1.sys.readFile(configPath);
        const { config, error } = typescript_1.parseConfigFileTextToJson(configPath, tsConfig);
        if (error) {
            log_1.logError('config file "${yellow(configPath)}" has an error');
            process.exit(15);
        }
        return new Promise((resolve, reject) => {
            child_process_1.exec(`npx tsc -p ${configPath}`, (err, res) => {
                // console.log(err, res);
                if (res) {
                    log_1.logError('Typescript error while compiling plugins. the error is:');
                    log_1.logError(res);
                    reject();
                }
                resolve(undefined);
            });
        });
    }
    catch (e) {
        console.log(e);
        process.exit(15);
    }
    process.exit(0);
}
async function compileTSConfig(path) {
    try {
        await compileUserPluginsAndConfig();
        const jsFile = getJsName(path);
        const source = fs_extra_1.readFileSync(path).toString('utf8');
        const js = typescript_1.transpileModule(source, {
            fileName: path,
            reportDiagnostics: true,
        });
        if (js.diagnostics.length > 0) {
            log_1.logError(`----------------------------------------------------------------------------------------
       Error${js.diagnostics.length === 1 ? '' : 's'} while typescript compiling "${log_1.yellow(path)}"`);
            js.diagnostics.forEach((diagnostic) => {
                if (diagnostic.file) {
                    // tslint:disable-next-line: no-non-null-assertion
                    const { line, character } = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start);
                    const message = typescript_1.flattenDiagnosticMessageText(diagnostic.messageText, '\n');
                    log_1.logError(`    line (${line + 1},${character + 1}): ${message}`);
                }
                else {
                    log_1.logError(typescript_1.flattenDiagnosticMessageText(diagnostic.messageText, '\n'));
                }
            });
            log_1.logError('----------------------------------------------------------------------------------------');
            process.exit(15);
        }
        fs_extra_1.writeFileSync(jsFile, js.outputText);
    }
    catch (e) {
        console.log(e);
        process.exit(15);
    }
    // process.exit(0)
}
//# sourceMappingURL=compileConfig.js.map