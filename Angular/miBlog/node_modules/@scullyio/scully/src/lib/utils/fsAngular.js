"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.moveDistAngular = exports.checkChangeAngular = void 0;
const chokidar_1 = require("chokidar");
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const watchMode_1 = require("../watchMode");
const cli_options_1 = require("./cli-options");
const config_1 = require("./config");
const createFolderFor_1 = require("./createFolderFor");
const log_1 = require("./log");
const fsFolder_1 = require("./fsFolder");
async function checkChangeAngular(folder = path_1.join(config_1.scullyConfig.homeFolder, config_1.scullyConfig.distFolder) ||
    path_1.join(config_1.scullyConfig.homeFolder, './dist/browser'), reset = true, 
// tslint:disable-next-line:no-shadowed-variable
watch = false) {
    reWatch(folder, reset, watch);
}
exports.checkChangeAngular = checkChangeAngular;
// tslint:disable-next-line:no-shadowed-variable
function reWatch(folder, reset = true, watch = false) {
    const filename = path_1.join(folder);
    // watching 1 folder level above.
    watchFolder(path_1.join(folder, '../'))
        .pipe(
    // TODO test on mac, figure out what's coming in.
    // only act upon changes of the actual folder I'm interested in.
    operators_1.filter(r => r.fileName.includes(filename)), operators_1.filter(r => !r.fileName.includes('scully-routes.json')), 
    /** give the CLI some time to finnish */
    operators_1.debounceTime(1000), 
    // tap(console.log),
    operators_1.tap(() => moveDistAngular(folder, config_1.scullyConfig.outDir, { reset }, watch))
    // take(2)
    )
        .subscribe({
        complete: async () => {
            // await moveDistAngular(folder, scullyConfig.outDir);
        }
    });
}
function watchFolder(folder) {
    return new rxjs_1.Observable(obs => {
        let watcher;
        try {
            watcher = chokidar_1.watch(folder).on('all', (eventType, fileName) => {
                obs.next({ eventType, fileName });
            });
        }
        catch (e) {
            obs.error(e);
        }
        return () => watcher.close();
    });
}
// tslint:disable-next-line:no-shadowed-variable
async function moveDistAngular(src, dest, { reset = true, removeStaticDist = false }, watch = false) {
    try {
        // delete files
        if (removeStaticDist) {
            log_1.logWarn(`Cleaned up ${dest} folder.`);
            await fs_extra_1.remove(dest);
        }
        // make sure the static folder exists
        createFolderFor_1.createFolderFor(dest);
        await fs_extra_1.copy(src, dest);
        const source404 = path_1.join(src, 'index.html');
        const page404 = path_1.join(dest, '404.html');
        if (!fsFolder_1.existFolder(page404)) {
            /** only add a 404 if there isn't one */
            await fs_extra_1.copy(source404, page404);
        }
        log_1.log(`${log_1.green(` â˜º  `)} new Angular build imported`);
        if (reset) {
            watchMode_1.restartStaticServer();
        }
        else if (watch) {
            watchMode_1.startScullyWatchMode(cli_options_1.baseFilter);
        }
    }
    catch (e) {
        /**
         * Ignore errors.
         * Those are probably cause by too fast iterations
         * TODO: make sure this is solid
         */
    }
}
exports.moveDistAngular = moveDistAngular;
//# sourceMappingURL=fsAngular.js.map