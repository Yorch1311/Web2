"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.startWatch = void 0;
/*
 * NodeFsFolder
 * read directorys and files
 * reactive 100%
 * */
const fs_1 = require("fs");
const path_1 = require("path");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const log_1 = require("./log");
// tslint:disable-next-line:no-shadowed-variable
function readPath(folder) {
    // tslint:disable-next-line:variable-name
    const _path = path_1.join(__dirname, folder);
    if (existFolder(_path)) {
        return true;
    }
    else {
        log_1.log(`${log_1.red(`${folder} folder not found, directory ${_path}`)}.`);
        return false;
    }
}
function existFolder(src) {
    try {
        return fs_1.existsSync(src);
    }
    catch (e) {
        return false;
    }
}
function watchFolder(folder) {
    return new rxjs_1.Observable((obs) => {
        let watcher;
        try {
            watcher = fs_1.watch(folder, (event, fname) => {
                console.log('--------------------------------------------------');
                console.log(`New ${event} in ${fname}, re run scully.`);
                console.log('--------------------------------------------------');
                obs.next({ eventType: event, fileName: fname });
            });
        }
        catch (e) {
            obs.error(e);
        }
        return () => watcher.close();
    });
}
function startWatch(folder) {
    console.log('start process', folder);
    if (readPath(folder)) {
        const fxwatch = this.watchFolder(folder);
        fxwatch.pipe(operators_1.throttleTime(3000)).subscribe((x) => {
            console.log(x);
        });
    }
}
exports.startWatch = startWatch;
//# sourceMappingURL=nodeFsFolder.js.map