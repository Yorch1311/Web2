"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateScullyConfig = exports.loadConfig = exports.scullyDefaults = exports.scullyConfig = exports.angularRoot = void 0;
/* eslint-disable @typescript-eslint/no-use-before-define */
const os_1 = require("os");
const path_1 = require("path");
const compileConfig_1 = require("./compileConfig");
const findAngularJsonPath_1 = require("./findAngularJsonPath");
const log_1 = require("./log");
const read_angular_json_1 = require("./read-angular-json");
const validateConfig_1 = require("./validateConfig");
exports.angularRoot = findAngularJsonPath_1.findAngularJsonPath();
exports.scullyConfig = {};
exports.scullyDefaults = {
    bareProject: false,
    homeFolder: exports.angularRoot,
    outDir: path_1.join(exports.angularRoot, './dist/static/'),
    inlineStateOnly: false,
    thumbnails: false,
    maxRenderThreads: os_1.cpus().length,
    handle404: '',
    appPort: /** 1864 */ 'herodevs'.split('').reduce((sum, token) => (sum += token.charCodeAt(0)), 1000),
    staticPort: /** 1668 */ 'scully'.split('').reduce((sum, token) => (sum += token.charCodeAt(0)), 1000),
    reloadPort: /** 2667 */ 'scullyLiveReload'.split('').reduce((sum, token) => (sum += token.charCodeAt(0)), 1000),
    hostName: 'localhost',
    defaultPostRenderers: [],
};
const loadIt = async () => {
    const compiledConfig = await compileConfig_1.compileConfig();
    let angularConfig = {};
    let distFolder = path_1.join(exports.angularRoot, './dist');
    let projectConfig = {};
    try {
        angularConfig = read_angular_json_1.readAngularJson();
        const defaultProject = compiledConfig.projectName;
        projectConfig = angularConfig.projects[defaultProject];
        distFolder = projectConfig.architect.build.options.outputPath;
        if (distFolder.endsWith('dist') && !distFolder.includes('/')) {
            log_1.logError(`Your distribution files are in "${log_1.yellow(distFolder)}". Please change that to include a subfolder`);
            process.exit(15);
        }
    }
    catch (e) {
        // console.log(e);
        log_1.logError(`Could not find project "${log_1.yellow(compiledConfig.projectName)}" in 'angular.json'.`);
        // process.exit(15);
    }
    if (compiledConfig.hostUrl && compiledConfig.hostUrl.endsWith('/')) {
        compiledConfig.hostUrl = compiledConfig.hostUrl.substr(0, compiledConfig.hostUrl.length - 1);
    }
    // TODO: update types in interfacesandenums to force correct types in here.
    // tslint:disable-next-line: no-unused-expression
    Object.assign(exports.scullyConfig, 
    /** the default config */
    exports.scullyDefaults, 
    /** calculated defaults. */
    {
        sourceRoot: projectConfig.sourceRoot,
        projectRoot: projectConfig.root,
        distFolder,
    });
    /** activate loaded config */
    await exports.updateScullyConfig(compiledConfig);
    return exports.scullyConfig;
};
/** export the config as a promise, so you can wait for it when you need config during 'boot' */
let promisedConfig;
exports.loadConfig = (config) => {
    if (config !== undefined) {
        promisedConfig = exports.updateScullyConfig(config);
    }
    if (!promisedConfig) {
        promisedConfig = loadIt();
    }
    return promisedConfig;
};
exports.updateScullyConfig = async (config) => {
    /** note, an invalid config will abort the entire program. */
    const newConfig = Object.assign({}, exports.scullyConfig, config);
    if (config.outDir === undefined) {
        log_1.logWarn(`The option outDir isn't configured, using default folder "${log_1.yellow(exports.scullyConfig.outDir)}".`);
    }
    else {
        config.outDir = path_1.join(exports.angularRoot, config.outDir);
    }
    const validatedConfig = await validateConfig_1.validateConfig(newConfig);
    if (validatedConfig) {
        const mergedRoutes = { ...exports.scullyConfig.routes, ...validatedConfig.routes };
        Object.assign(exports.scullyConfig, config, { routes: mergedRoutes });
    }
    return exports.scullyConfig;
};
//# sourceMappingURL=config.js.map