"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.waitForServerToBeAvailable = void 0;
const cli_options_1 = require("../cli-options");
const config_1 = require("../config");
const httpGetJson_1 = require("../httpGetJson");
const log_1 = require("../log");
const captureMessage_1 = require("../captureMessage");
const maxTries = cli_options_1.serverTimeout !== 0 ? Math.ceil(cli_options_1.serverTimeout / 125) : 80;
/**
 * Wait until our server is up, and accepting requests
 */
exports.waitForServerToBeAvailable = () => new Promise((resolve, reject) => {
    let tries = 0;
    const tryServer = () => {
        ++tries;
        /** 80 tries should be ~10 seconds, that should be more as enough to start the server (mostly for GA) */
        if (tries > maxTries) {
            reject(`server didn't respond`);
        }
        httpGetJson_1.httpGetJson(`http${cli_options_1.ssl ? 's' : ''}://${config_1.scullyConfig.hostName}:${config_1.scullyConfig.appPort}/_pong`, {
            suppressErrors: true,
        })
            .then((res) => {
            if (res && res.res) {
                if (res.homeFolder !== config_1.scullyConfig.homeFolder || res.projectName !== config_1.scullyConfig.projectName) {
                    log_1.logWarn('`scully serve` is running in a different project. you can kill it by running `npx scully killServer`');
                    process.exit(15);
                }
                resolve(true);
                return;
            }
            setTimeout(tryServer, 125);
        })
            .catch((e) => {
            // console.log(e);
            captureMessage_1.captureException(e);
            setTimeout(tryServer, 125);
        });
    };
    tryServer();
});
//# sourceMappingURL=waitForServerToBeAvailable.js.map