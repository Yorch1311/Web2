"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.closeExpress = exports.staticServer = void 0;
const compression_1 = __importDefault(require("compression"));
const cors_1 = __importDefault(require("cors"));
const express_1 = __importDefault(require("express"));
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const __1 = require("..");
const watchMode_1 = require("../../watchMode");
const cli_options_1 = require("../cli-options");
const log_1 = require("../log");
const addSSL_1 = require("./addSSL");
const dataServer_1 = require("./dataServer");
const handleUnknownRoute_1 = require("./handleUnknownRoute");
const proxyAdd_1 = require("./proxyAdd");
const config_1 = require("../config");
let angularServerInstance;
let scullyServerInstance;
let dataServerInstance;
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
async function staticServer(port) {
    try {
        await config_1.loadConfig();
        port = port || __1.scullyConfig.staticPort;
        const hostName = __1.scullyConfig.hostName;
        const scullyServer = express_1.default();
        const distFolder = path_1.join(__1.scullyConfig.homeFolder, __1.scullyConfig.hostFolder || __1.scullyConfig.distFolder);
        if (cli_options_1.tds) {
            dataServerInstance = await dataServer_1.startDataServer(cli_options_1.ssl);
        }
        const options = {
            dotfiles: 'ignore',
            etag: false,
            extensions: ['htm', 'html'],
            index: ['index.html'],
            /** use a sensible setting for dev time. */
            maxAge: '30s',
            redirect: true,
            setHeaders(res, path, stat) {
                res.set('x-timestamp', Date.now());
            },
        };
        scullyServer.use(compression_1.default());
        scullyServer.use(cors_1.default({ origin: '*', methods: ['get'] }));
        proxyAdd_1.proxyAdd(scullyServer);
        scullyServer.use(injectReloadMiddleware);
        scullyServer.use(express_1.default.static(__1.scullyConfig.outHostFolder || __1.scullyConfig.outDir, options));
        scullyServer.get('/scullySettings', (req, res) => {
            res.set('Content-Type', 'text/html');
            return res.send(`
      <h1> Scully settings</h1>
      ssl: ${cli_options_1.ssl},<br>
      tds: ${cli_options_1.tds},<br>
      watch: ${cli_options_1.watch},<br>
      proxy: ${cli_options_1.proxyConfigFile}
      `);
        });
        scullyServerInstance = addSSL_1.addSSL(scullyServer, hostName, port).listen(port, hostName, (x) => {
            log_1.log(`Scully static server started on "${log_1.yellow(`http${cli_options_1.ssl ? 's' : ''}://${hostName}:${port}/`)}"`);
        });
        const angularDistServer = express_1.default();
        angularDistServer.use(compression_1.default());
        proxyAdd_1.proxyAdd(angularDistServer);
        angularDistServer.get('/_pong', (req, res) => {
            res.json({
                res: true,
                homeFolder: __1.scullyConfig.homeFolder,
                projectName: __1.scullyConfig.projectName,
            });
        });
        angularDistServer.get('/killMe', async (req, res) => {
            log_1.logWarn('Received Kill command');
            await res.json({ ok: true });
            await closeExpress();
            log_1.logWarn('Closed servers');
            process.exit(0);
        });
        /** use express to serve all static assets in dist folder. */
        angularDistServer.use(express_1.default.static(distFolder, options));
        /** don't forget te top route. */
        angularDistServer.get('/', (req, res) => res.sendFile(path_1.join(distFolder, '/index.html')));
        angularDistServer.get('/*', handleUnknownRoute_1.handleUnknownRoute);
        angularServerInstance = addSSL_1.addSSL(angularDistServer, hostName, __1.scullyConfig.appPort).listen(__1.scullyConfig.appPort, hostName, (x) => {
            log_1.log(`Angular distribution server started on "${log_1.yellow(`http${cli_options_1.ssl ? 's' : ''}://${hostName}:${__1.scullyConfig.appPort}/`)}" `);
        });
        return {
            angularDistServer,
            scullyServer,
        };
    }
    catch (e) {
        log_1.logError(`Could not start Scully serve`, e);
    }
}
exports.staticServer = staticServer;
function closeExpress() {
    if (scullyServerInstance && scullyServerInstance.close) {
        scullyServerInstance.close();
    }
    if (angularServerInstance && angularServerInstance.close) {
        angularServerInstance.close();
    }
    if (dataServerInstance && dataServerInstance.close) {
        dataServerInstance.close();
    }
}
exports.closeExpress = closeExpress;
function injectReloadMiddleware(req, res, next) {
    const url = req.url;
    let path;
    if (!cli_options_1.watch) {
        return next();
    }
    if (url.endsWith('/') || url.endsWith('index.html')) {
        if (url.endsWith('/')) {
            path = path_1.join(__1.scullyConfig.outDir, url, 'index.html');
        }
        else {
            path = path_1.join(__1.scullyConfig.outDir, url);
        }
        // console.log(path);
        if (__1.existFolder(path)) {
            const content = fs_extra_1.readFileSync(path, 'utf8').toString();
            try {
                const [start, endPart] = content.split('</body>');
                const injected = start + watchMode_1.createScript() + '</body>' + endPart;
                res.set('Content-Type', 'text/html');
                // console.log('injected', req.url);
                return res.send(injected);
            }
            catch (e) {
                console.error(e);
            }
            //       console.log(`
            // --------------------------------------------
            // Time:, ${new Date().toISOString().split('T')[1]};
            // url: ${req.url}
            // --------------------------------------------`);
        }
    }
    next();
}
//# sourceMappingURL=staticServer.js.map