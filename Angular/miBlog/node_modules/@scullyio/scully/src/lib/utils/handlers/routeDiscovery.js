"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.routeDiscovery = void 0;
const perf_hooks_1 = require("perf_hooks");
const addOptionalRoutesPlugin_1 = require("../../routerPlugins/addOptionalRoutesPlugin");
const cli_options_1 = require("../cli-options");
const log_1 = require("../log");
const performanceIds_1 = require("../performanceIds");
async function routeDiscovery(unhandledRoutes, localBaseFilter) {
    perf_hooks_1.performance.mark('startDiscovery');
    performanceIds_1.performanceIds.add('Discovery');
    log_1.log('Pull in data to create additional routes.');
    let handledRoutes = [];
    /** baseroutes are always the start of the route, so it ends with an trailing `*` */
    const baseFilterRegexs = wildCardStringToRegEx(localBaseFilter, {
        addTrailingStar: true,
    });
    const routeFilterRegexs = wildCardStringToRegEx(cli_options_1.routeFilter);
    try {
        handledRoutes = (await addOptionalRoutesPlugin_1.addOptionalRoutes(
        /** use all handled routes without empty ones, and apply the baseFilter */
        unhandledRoutes.filter((r) => typeof r === 'string' && baseFilterRegexs.some((reg) => r.match(reg) !== null)))).filter((r) => !r.route.endsWith('*') &&
            /** use the routefilter to only include matches */
            (cli_options_1.routeFilter === '' || routeFilterRegexs.some((reg) => r.route.match(reg) !== null)));
    }
    catch (e) {
        log_1.logError(`Problem during route handling, see below for details`);
        console.error(e);
    }
    perf_hooks_1.performance.mark('stopDiscovery');
    return handledRoutes;
}
exports.routeDiscovery = routeDiscovery;
function wildCardStringToRegEx(string, { addTrailingStar } = { addTrailingStar: false }) {
    const t = string.split(',');
    return t.map((item) => {
        if (addTrailingStar) {
            item += '*';
        }
        const escaped = item.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'); // $& means the whole matched string
        return new RegExp(`^${escaped.replace(/\\\*/g, '.*?')}$`, 'gi');
    });
}
//# sourceMappingURL=routeDiscovery.js.map