"use strict";
/**
 * DefaultActions is the place where Scully run the steps.
 * Here scully:
 * create the list of unhandler routes
 * create the list for handler routes
 * update the handle route list with the plugins
 * run the routeProcess plugins to modify the handle routes array
 * start routeProcessDonePlugin and run all the processDonePlugins (developer/users can get the handle route list, and do a sitemap or things like this)
 * RenderParrarel activate the plugins (executePlugin) for every route (like run puppeteer)
 * Start allDonePlugins and run the all Done plugins
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateAll = void 0;
const pluginManagement_1 = require("../../pluginManagement");
const launchedBrowser_1 = require("../../renderPlugins/launchedBrowser");
const cli_options_1 = require("../cli-options");
const config_1 = require("../config");
const log_1 = require("../log");
const handleAllDone_1 = require("./handleAllDone");
const handleRouteDiscoveryDone_1 = require("./handleRouteDiscoveryDone");
const handleTravesal_1 = require("./handleTravesal");
const processRoutes_1 = require("./processRoutes");
const renderParallel_1 = require("./renderParallel");
const routeDiscovery_1 = require("./routeDiscovery");
exports.generateAll = Symbol('generateAll');
pluginManagement_1.registerPlugin(pluginManagement_1.scullySystem, exports.generateAll, plugin);
async function plugin(localBaseFilter = cli_options_1.baseFilter) {
    await config_1.loadConfig();
    try {
        // maintain progress ui
        /** handleTravesal execute the guessParser and create a list of route.routes */
        const unhandledRoutes = await pluginManagement_1.findPlugin(handleTravesal_1.handleTravesal)();
        /** RouteDiscovery is the place for create the list of handler routes & add the plugins to the route */
        const handledRoutes = await routeDiscovery_1.routeDiscovery(unhandledRoutes, localBaseFilter);
        /** handle routeProcess plugins (this is the place to change handle routes) */
        const processedRoutes = await pluginManagement_1.findPlugin(processRoutes_1.processRoutes)(handledRoutes);
        /** handleRouteDiscoveryDone run the discoverydone plugins */
        const discoveryDone = handleRouteDiscoveryDone_1.handleRouteDiscoveryDone(processedRoutes);
        /** update progress to show what's going on  */
        log_1.printProgress(false, 'Starting puppeteer');
        /** launch the browser, its shared among renderers */
        await launchedBrowser_1.launchedBrowser();
        /** start handling each route, works in chunked parallel mode  */
        await renderParallel_1.renderParallel(processedRoutes);
        /** wait for routeDiscoveryDone plugins to be ready. they can still be running. */
        await discoveryDone;
        /** fire off the allDone plugins */
        await handleAllDone_1.handleAllDone(processedRoutes);
        // stop progress ui
        return processedRoutes;
    }
    catch (e) {
        // TODO: add better error handling
        log_1.log(e);
    }
    return [];
}
//# sourceMappingURL=defaultAction.js.map