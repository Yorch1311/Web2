"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.printProgress = exports.logWarn = exports.logWrite = exports.logError = exports.log = exports.stopProgress = exports.startProgress = exports.spinToken = exports.LogSeveritys = exports.green = exports.yellow = exports.red = exports.white = exports.orange = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */
const chalk_1 = __importDefault(require("chalk"));
const fs_1 = require("fs");
const path_1 = require("path");
const readline = __importStar(require("readline"));
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const captureMessage_1 = require("./captureMessage");
const cli_options_1 = require("./cli-options");
const findAngularJsonPath_1 = require("./findAngularJsonPath");
exports.orange = chalk_1.default.hex('#FFA500');
exports.white = chalk_1.default.white, exports.red = chalk_1.default.red, exports.yellow = chalk_1.default.yellow, exports.green = chalk_1.default.green;
var LogSeveritys;
(function (LogSeveritys) {
    LogSeveritys[LogSeveritys["normal"] = 0] = "normal";
    LogSeveritys[LogSeveritys["warning"] = 1] = "warning";
    LogSeveritys[LogSeveritys["error"] = 2] = "error";
    LogSeveritys[LogSeveritys["none"] = 3] = "none";
})(LogSeveritys = exports.LogSeveritys || (exports.LogSeveritys = {}));
const homeFolder = findAngularJsonPath_1.findAngularJsonPath();
const logFilePath = path_1.join(homeFolder, 'scully.log');
/** Chalk adds ANSI escape codes for terminal string styling that shouldn't be included in logs  */
const stripANSICodes = (string) => string.replace(/\x1b\[\d+m/g, '');
const logToFile = (string) => new Promise((res, rej) => {
    if (cli_options_1.logSeverity !== 'none') {
        fs_1.appendFile(logFilePath, stripANSICodes(string), (e) => (e ? rej(e) : res()));
    }
});
function* spinTokens() {
    const tokens = ['⠋', '⠙', '⠹', '⠸', '⠼', '⠴', '⠦', '⠧', '⠇', '⠏'];
    let current = 0;
    while (true) {
        yield tokens[current];
        current += 1;
        if (current === tokens.length) {
            current = 0;
        }
    }
}
exports.spinToken = spinTokens();
const state = {
    interval: 250,
    startTime: Date.now(),
    lastMessage: '',
    intervalSub: undefined,
    lastSpin: exports.spinToken.next().value,
};
function writeProgress(msg = state.lastMessage) {
    /** cursorTo isn't there in CI, don't write progress in CI at all. */
    if (process.stdout.cursorTo) {
        if (Date.now() - state.startTime > state.interval) {
            // tslint:disable-next-line: no-unused-expression
            state.lastSpin = exports.spinToken.next().value;
            state.startTime = Date.now();
        }
        readline.clearLine(process.stdout, 0);
        readline.cursorTo(process.stdout, 0, null);
        if (msg) {
            process.stdout.write(`${state.lastSpin} ${msg}`);
        }
        state.lastMessage = msg;
    }
}
function startProgress() {
    /** cursorTo isn't there in CI, don't write progress in CI at all. */
    if (process.stdout.cursorTo) {
        state.intervalSub = rxjs_1.interval(state.interval)
            .pipe(operators_1.tap(() => writeProgress()))
            .subscribe();
    }
}
exports.startProgress = startProgress;
function stopProgress() {
    state.lastMessage = '';
    if (state.intervalSub) {
        state.intervalSub.unsubscribe();
    }
    if (process.stdout.cursorTo) {
        readline.clearLine(process.stdout, 0);
    }
}
exports.stopProgress = stopProgress;
exports.log = (...a) => enhancedLog(exports.white, LogSeveritys.normal, ...a);
exports.logError = (...a) => enhancedLog(exports.red, LogSeveritys.error, ...a);
exports.logWrite = (...a) => enhancedLog(exports.white, LogSeveritys.error, ...a);
exports.logWarn = (...a) => enhancedLog(exports.orange, LogSeveritys.warning, ...a);
function enhancedLog(colorFn, severity, ...args) {
    const pickedSeverity = cli_options_1.logSeverity;
    const out = [];
    if (cli_options_1.noLog && severity === LogSeveritys.normal) {
        return;
    }
    for (const item of args) {
        if (typeof item === 'string') {
            out.push(makeRelative(item));
        }
        else if (item instanceof Error) {
            out.push(item.toString());
        }
        else {
            out.push(item);
        }
    }
    if (severity >= LogSeveritys[pickedSeverity] && out.length > 0) {
        logToFile(out.filter((i) => i).join('\r\n'))
            .then(() => logToFile('\r\n'))
            .catch((e) => console.log('error while logging to file', e));
    }
    if (severity === LogSeveritys.error) {
        captureMessage_1.captureMessage(out.filter((i) => i).join('\r\n'));
    }
    // tslint:disable-next-line: no-unused-expression
    if (process.stdout.cursorTo) {
        process.stdout.cursorTo(0);
        readline.clearLine(process.stdout, 0);
    }
    process.stdout.write(colorFn(...out));
    process.stdout.write('\n');
    writeProgress();
}
function makeRelative(txt) {
    const h = homeFolder || process.cwd();
    return txt.replace(h, '.');
}
function isNumber(text) {
    return typeof text === 'number';
}
function printProgress(tasks, text = 'Tasks Left:', total) {
    const number = isNumber(tasks) ? `${exports.yellow(tasks)}` : '';
    const maxNumber = isNumber(total) ? `${exports.yellow('/' + total)}` : '';
    const msg = `${exports.orange(text)} ${number}${maxNumber}`;
    writeProgress(msg);
}
exports.printProgress = printProgress;
// TODO: Decide if we want to pull console logging into scully log?
// global.console.log = log;
// global.console.error = () => undefined;
// global.console.warn = logWarn;
//# sourceMappingURL=log.js.map