"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addSSL = void 0;
const fs_1 = require("fs");
const https_1 = __importDefault(require("https"));
const selfsigned_1 = __importDefault(require("selfsigned"));
const __1 = require("..");
const httpGetJson_1 = require("../httpGetJson");
function addSSL(server, host, port) {
    if (!__1.ssl) {
        return server;
    }
    else {
        httpGetJson_1.logWarnOnce(`

****************************************************************************************
This is a development server for Scully applications.

It hasn't been reviewed for security issues.
DON'T USE IT FOR SERVING IN PRODUCTION!
****************************************************************************************

`);
        let pems = {
            private: '',
            cert: ''
        };
        if (__1.sslCert && __1.sslKey) {
            try {
                pems.private = fs_1.readFileSync(__1.sslKey).toString();
                pems.cert = fs_1.readFileSync(__1.sslCert).toString();
            }
            catch (e) {
                __1.logError(`Could not read the file: ${e.path}`);
                __1.log(`${__1.yellow(`Please check the path for the certificate.`)}`);
                process.exit(0);
            }
        }
        else {
            const attrs = [
                {
                    name: 'scully',
                    value: `${host}:${port}`,
                    type: 'RSAPublicKey'
                }
            ];
            pems = selfsigned_1.default.generate(attrs, { days: 365 });
        }
        // serve the API with signed certificate on 443 (SSL/HTTPS) port
        return https_1.default.createServer({
            key: pems.private,
            cert: pems.cert
        }, server);
    }
}
exports.addSSL = addSSL;
//# sourceMappingURL=addSSL.js.map