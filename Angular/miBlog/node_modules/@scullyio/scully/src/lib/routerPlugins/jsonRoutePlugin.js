"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.jsonRoutePlugin = void 0;
const pluginRepository_1 = require("../pluginManagement/pluginRepository");
const deepGet_1 = require("../utils/deepGet");
const httpGetJson_1 = require("../utils/httpGetJson");
const log_1 = require("../utils/log");
const routeSplit_1 = require("../utils/routeSplit");
const renderTemplate_1 = require("./renderTemplate");
exports.jsonRoutePlugin = async (route, conf) => {
    try {
        const { params, createPath } = routeSplit_1.routeSplit(route);
        // const params = parts.filter(p => p.startsWith(':')).map(id => id.slice(1));
        const missingParams = params.filter((param) => !conf.hasOwnProperty(param.part));
        if (missingParams.length > 0) {
            console.error(`missing config for parameters (${missingParams.join(',')}) in route: ${route}. Skipping`);
            return [{ route, type: conf.type }];
        }
        log_1.printProgress(undefined, `Json Route plugin loading data for "${log_1.yellow(route)}"`);
        /** helper to get the data, parses out the context, and the property */
        const loadData = (param, context = {}) => {
            /** us es-template lie string to construct the url */
            const url = renderTemplate_1.renderTemplate(conf[param.part].url, context).trim();
            return httpGetJson_1.httpGetJson(url, {
                headers: conf[param.part].headers,
            })
                .then((rawData) => (conf[param.part].resultsHandler ? conf[param.part].resultsHandler(rawData) : rawData))
                .then((rawData) => conf[param.part].property === undefined ? rawData : rawData.map((row) => deepGet_1.deepGet(conf[param.part].property, row)));
        };
        const routes = await params.reduce(async (total, param, col) => {
            const foundRoutes = await total;
            if (col === 0) {
                /**
                 * first iteration, just dump the top level in
                 * and convert it to array format.
                 */
                return (await loadData(param)).map((r) => [r]);
            }
            return await Promise.all(foundRoutes.map(async (data) => {
                const context = data.reduce((ctx, r, x) => {
                    return { ...ctx, [params[x].part]: r };
                }, {});
                const additionalRoutes = await loadData(param, context);
                return additionalRoutes.map((r) => [...data, r]);
            }, [])).then((chunks) => chunks.reduce((acc, cur) => acc.concat(cur)));
        }, Promise.resolve([]));
        return routes.map((routeData) => ({
            route: createPath(...routeData),
            type: conf.type,
        }));
    }
    catch (e) {
        log_1.logError(`Could not fetch data for route "${log_1.yellow(route)}"`);
        return [{ route, type: conf.type }];
    }
};
// TODO actual validation of the config
const jsonValidator = async (conf) => {
    const { params } = routeSplit_1.routeSplit(conf.path);
    // return [yellow('all seems ok')];
    return [];
};
pluginRepository_1.registerPlugin('router', 'json', exports.jsonRoutePlugin, jsonValidator);
//# sourceMappingURL=jsonRoutePlugin.js.map