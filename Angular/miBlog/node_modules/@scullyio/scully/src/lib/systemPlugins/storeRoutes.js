"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.storeRoutes = exports.routesFileName = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
const pluginManagement_1 = require("../pluginManagement");
const cli_options_1 = require("../utils/cli-options");
const config_1 = require("../utils/config");
const createFolderFor_1 = require("../utils/createFolderFor");
const log_1 = require("../utils/log");
exports.routesFileName = '/assets/scully-routes.json';
exports.storeRoutes = Symbol('storeRoutes');
pluginManagement_1.registerPlugin(pluginManagement_1.scullySystem, exports.storeRoutes, storeRoutesPlugin);
async function storeRoutesPlugin(routes) {
    /** in the angular source folder */
    const srcFile = path_1.join(config_1.scullyConfig.homeFolder, config_1.scullyConfig.sourceRoot, exports.routesFileName);
    const files = [
        srcFile,
        /** in the scully outfolder */
        path_1.join(config_1.scullyConfig.outDir, exports.routesFileName),
        /** in the angular dist folder */
        path_1.join(config_1.scullyConfig.homeFolder, config_1.scullyConfig.distFolder, exports.routesFileName),
    ];
    try {
        const jsonResult = JSON.stringify(routes.map((r) => ({
            route: r.route || '/',
            title: r.title,
            ...r.data,
        })));
        if (cli_options_1.watch) {
            /** we need to compare in watch mode, so we don't enter an endless loop where the angular CLI and the Scully CLI keep updating ech other */
            try {
                const existing = fs_1.readFileSync(srcFile).toString('utf-8').trim();
                if (jsonResult.trim() === existing) {
                    /** the same. done, don't write */
                    log_1.log('keep existing route file');
                    return;
                }
            }
            catch (e) {
                /** there is an error, that mean a difference, just write the files */
            }
        }
        const write = (file, i, collection) => {
            createFolderFor_1.createFolderFor(file);
            log_1.printProgress(i + 1, 'Creating Route List:', collection.length);
            fs_1.writeFileSync(file, jsonResult);
        };
        files.forEach(write);
        log_1.log(`Route list created in files:${files.map((f) => `
  "${log_1.yellow(f)}"`)}
`);
    }
    catch (_a) {
        log_1.logError(`Could not write routes to files:${files.map((f) => `
  "${log_1.yellow(f)}"`)}
`);
    }
}
//# sourceMappingURL=storeRoutes.js.map