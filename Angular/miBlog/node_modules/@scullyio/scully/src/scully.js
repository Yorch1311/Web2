#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * The above line is needed to be able to run in npx and CI.
 */
const child_process_1 = require("child_process");
const fs_extra_1 = require("fs-extra");
const open_1 = __importDefault(require("open"));
const path_1 = require("path");
require("./lib/pluginManagement/systemPlugins");
const startBackgroundServer_1 = require("./lib/startBackgroundServer");
const utils_1 = require("./lib/utils");
const captureMessage_1 = require("./lib/utils/captureMessage");
const cli_options_1 = require("./lib/utils/cli-options");
const config_1 = require("./lib/utils/config");
require("./lib/utils/exitHandler");
const exitHandler_1 = require("./lib/utils/exitHandler");
const fsAngular_1 = require("./lib/utils/fsAngular");
const httpGetJson_1 = require("./lib/utils/httpGetJson");
const log_1 = require("./lib/utils/log");
const isPortTaken_1 = require("./lib/utils/serverstuff/isPortTaken");
const startup_1 = require("./lib/utils/startup");
const watchMode_1 = require("./lib/watchMode");
/** the default of 10 is too shallow for generating pages. */
// eslint-disable-next-line @typescript-eslint/no-var-requires
require('events').defaultMaxListeners = 100;
const NODE_VERSION = 12;
if (process.argv.includes('version')) {
    const { version } = JSON.parse(fs_extra_1.readFileSync(path_1.join(__dirname, './package.json')).toString());
    process.exit(0);
}
if (!cli_options_1.disableProjectFolderCheck && !__dirname.includes(process.cwd())) {
    /** started from outside project folder, _or_ powershell with uppercase pathname */
    if (fs_extra_1.existsSync('./node_modules/@scullyio/scully/scully.js')) {
        child_process_1.execSync('node ./node_modules/@scullyio/scully/scully.js', {
            cwd: './',
            stdio: 'inherit',
        });
    }
    else {
        log_1.logError(`
--------------------------------------------------------------------------
you started scully outside of a scully project-folder,
or didn't install packages in this folder.
We can't find your local copy to start.
This can also happen on windows with PowerShell and mixed case path-names
--------------------------------------------------------------------------`);
    }
    process.exit(0);
}
// tslint:disable-next-line:radix
if (parseInt(process.version.match(/^v(\d+\.\d+)/)[1]) < NODE_VERSION) {
    log_1.logError(`
**********************************************************
**********************************************************
You are using Node "${process.version}", Scully support
Node version ${NODE_VERSION} or higher please check the Minimal setup required
https://scully.io/docs/learn/getting-started/requirements/
**********************************************************
**********************************************************
      `);
    process.exit(0);
}
// eslint-disable-next-line @typescript-eslint/no-var-requires
const os = require('os');
const clientOS = os.release().toLocaleLowerCase();
if (clientOS.includes('microsoft') && process.platform === 'linux') {
    log_1.logWarn(`
**********************************************************
**********************************************************
You are using "${log_1.yellow(`WSL`)}" as a terminal, if you get an
error please read the pre-requisites for Microsoft WSL.
https://scully.io/docs/learn/getting-started/installation/
**********************************************************
**********************************************************
      `);
}
(async () => {
    exitHandler_1.installExitHandler();
    /** make sure not to do something before the config is ready */
    let scullyConfig;
    let err;
    /** load the config, and use the defaults when there is an error */
    try {
        scullyConfig = await config_1.loadConfig();
    }
    catch (e) {
        scullyConfig = config_1.scullyDefaults;
        /** store the error */
        err = e;
    }
    /** do we need to kill something? */
    if (process.argv.includes('killServer')) {
        await httpGetJson_1.httpGetJson(`http://${scullyConfig.hostName}:${scullyConfig.appPort}/killMe`, {
            suppressErrors: true,
        }).catch((e) => {
            captureMessage_1.captureException(e);
            return e;
        });
        await httpGetJson_1.httpGetJson(`https://${scullyConfig.hostName}:${scullyConfig.appPort}/killMe`, {
            suppressErrors: true,
        }).catch((e) => {
            captureMessage_1.captureException(e);
            return e;
        });
        log_1.logWarn('Sent kill command to server');
        process.exit(0);
    }
    if (err) {
        captureMessage_1.captureException(err);
        /** exit due to severe error during config parsing */
        process.exit(15);
    }
    if (cli_options_1.hostName) {
        scullyConfig.hostName = cli_options_1.hostName;
    }
    await watchMode_1.isBuildThere(scullyConfig);
    if (process.argv.includes('serve')) {
        await watchMode_1.bootServe(scullyConfig);
        if (cli_options_1.openNavigator) {
            await open_1.default(`http${cli_options_1.ssl ? 's' : ''}://${scullyConfig.hostName}:${scullyConfig.staticPort}/`);
        }
    }
    else {
        const folder = path_1.join(scullyConfig.homeFolder, scullyConfig.distFolder);
        /** copy in current build artifacts */
        await fsAngular_1.moveDistAngular(folder, scullyConfig.outDir, {
            removeStaticDist: cli_options_1.removeStaticDist,
            reset: false,
        });
        const isTaken = await isPortTaken_1.isPortTaken(scullyConfig.staticPort);
        if (typeof scullyConfig.hostUrl === 'string') {
            log_1.logWarn(`
You are using "${log_1.yellow(scullyConfig.hostUrl)}" as server.
      `);
        }
        else {
            /** server ports already in use? */
            if (!isTaken) {
                startBackgroundServer_1.startBackgroundServer(scullyConfig);
            }
            else {
                // debug only
                console.log(`Background servers already running.`);
            }
            if (!(await utils_1.waitForServerToBeAvailable().catch((e) => false))) {
                log_1.logError('Could not connect to server');
                process.exit(15);
            }
        }
        if (cli_options_1.openNavigator) {
            await open_1.default(`http${cli_options_1.ssl ? 's' : ''}://${scullyConfig.hostName}:${scullyConfig.staticPort}/`);
        }
        if (cli_options_1.watch) {
            watchMode_1.watchMode(path_1.join(scullyConfig.homeFolder, scullyConfig.distFolder) || path_1.join(scullyConfig.homeFolder, './dist/browser'));
        }
        else {
            // console.log('servers available');
            await startup_1.startScully();
            if (!isTaken && typeof scullyConfig.hostUrl !== 'string') {
                // kill serve ports
                await httpGetJson_1.httpGetJson(`http${cli_options_1.ssl ? 's' : ''}://${scullyConfig.hostName}:${scullyConfig.appPort}/killMe`, {
                    suppressErrors: true,
                });
            }
            /** done, stop the program */
            process.exit(0);
        }
    }
})();
//# sourceMappingURL=scully.js.map